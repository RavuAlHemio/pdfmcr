{"mappings":"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","sources":["<anon>","src/main.ts","src/annotations.ts","src/common.ts","src/textmgmt.ts","src/serialize.ts","src/splitter.ts","src/badmap.ts","src/svgdrag.ts"],"sourcesContent":["(() => {\nconst $813589cc5cb274c7$export$276d1de0bc02ff5b = \"http://www.w3.org/2000/svg\";\nfunction $813589cc5cb274c7$export$3ae71ba538136673(element, svgLengthType) {\n    const svgRoot = element.ownerSVGElement;\n    if (svgRoot === null) return null;\n    const xform = element.transform.baseVal;\n    if (xform.length !== 1) return null;\n    const xform0 = xform.getItem(0);\n    if (xform0.type !== SVGTransform.SVG_TRANSFORM_TRANSLATE) return null;\n    // a transformation matrix is:\n    // (m11 m21 m31 m41)\n    // (m12 m22 m32 m42)\n    // (m13 m23 m33 m43)\n    // (m14 m24 m34 m44)\n    //\n    // or, with single-letter aliases:\n    // (a c _ e)\n    // (b d _ f)\n    // (_ _ _ _)\n    // (_ _ _ _)\n    //\n    // some browsers steadfastly refuse to support the m## variables\n    //\n    // a 2D translation is:\n    // (1 0 0 tx)\n    // (0 1 0 ty)\n    // (0 0 1 tz)\n    // (0 0 0  1)\n    const sizer = svgRoot.createSVGLength();\n    sizer.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_NUMBER, xform0.matrix.e);\n    sizer.convertToSpecifiedUnits(svgLengthType);\n    const x = sizer.valueInSpecifiedUnits;\n    sizer.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_NUMBER, xform0.matrix.f);\n    sizer.convertToSpecifiedUnits(svgLengthType);\n    const y = sizer.valueInSpecifiedUnits;\n    return {\n        x: x,\n        y: y\n    };\n}\nfunction $813589cc5cb274c7$export$18ec489782ea8e1f(pageGroup) {\n    // find child image\n    let image = null;\n    for (let child of pageGroup.children)if (child.namespaceURI === $813589cc5cb274c7$export$276d1de0bc02ff5b && child.tagName === \"image\") {\n        image = child;\n        break;\n    }\n    if (image === null) return null;\n    // convert its height into points and return\n    image.height.baseVal.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PT);\n    return image.height.baseVal.valueInSpecifiedUnits;\n}\nfunction $813589cc5cb274c7$export$cba25e9bb6cb9e56(parent, namespace, localName) {\n    const childElements = parent.children;\n    const namedElements = [];\n    for(let i = 0; i < childElements.length; i++){\n        const childElement = childElements[i];\n        if (childElement.namespaceURI === namespace && childElement.localName === localName) namedElements.push(childElement);\n    }\n    return namedElements;\n}\nfunction $813589cc5cb274c7$export$8e0657814ad0f535(stringValue) {\n    if (stringValue.endsWith(\"pt\")) return +stringValue.substring(0, stringValue.length - 2);\n    else return null;\n}\n\n\n\n\n(function(TextManagement) {\n    let textForm = null;\n    let selectedText = null;\n    let selectedTextSpan = null;\n    function textSelected(newlySelectedText) {\n        if (textForm === null) return;\n        selectedText = newlySelectedText;\n        // repopulate list of tspans\n        while(textForm.textSpanSelect.options.length > 0)textForm.textSpanSelect.options.remove(textForm.textSpanSelect.options.length - 1);\n        const tspans = (0, $813589cc5cb274c7$export$cba25e9bb6cb9e56)(selectedText, (0, $813589cc5cb274c7$export$276d1de0bc02ff5b), \"tspan\");\n        for (let tspan of tspans){\n            const option = document.createElement(\"option\");\n            option.textContent = tspan.textContent;\n            textForm.textSpanSelect.appendChild(option);\n        }\n        textForm.textSpanSelect.selectedIndex = 0;\n        textSpanSelected();\n        textForm.editLabelSection.style.display = \"\";\n    }\n    TextManagement.textSelected = textSelected;\n    function textDeselected() {\n        if (textForm === null) return;\n        textForm.editLabelSection.style.display = \"none\";\n        selectedText = null;\n        selectedTextSpan = null;\n    }\n    TextManagement.textDeselected = textDeselected;\n    function textSpanSelected() {\n        if (textForm === null) return;\n        // pick out the text-span element\n        if (selectedText === null) return;\n        const textSpans = (0, $813589cc5cb274c7$export$cba25e9bb6cb9e56)(selectedText, (0, $813589cc5cb274c7$export$276d1de0bc02ff5b), \"tspan\");\n        const textSpanIndex = textForm.textSpanSelect.selectedIndex;\n        if (textSpanIndex === -1) selectedTextSpan = null;\n        else if (textSpanIndex >= textSpans.length) // invalid selection\n        selectedTextSpan = null;\n        else selectedTextSpan = textSpans[textSpanIndex];\n        if (selectedTextSpan === null) return;\n        // update the form\n        let leading = 0;\n        const lineHeight = (0, $813589cc5cb274c7$export$8e0657814ad0f535)(selectedTextSpan.style.lineHeight);\n        const fontSize = (0, $813589cc5cb274c7$export$8e0657814ad0f535)(selectedTextSpan.style.fontSize) ?? 12;\n        if (lineHeight !== null) leading = lineHeight - fontSize;\n        textForm.textArea.value = selectedTextSpan.textContent ?? \"\";\n        textForm.fontBoldCheckbox.checked = selectedTextSpan.style.fontWeight === \"bold\";\n        textForm.fontItalicCheckbox.checked = selectedTextSpan.style.fontStyle === \"italic\";\n        textForm.fontSizeInput.value = \"\" + ((0, $813589cc5cb274c7$export$8e0657814ad0f535)(selectedTextSpan.style.fontSize) ?? 12);\n        textForm.charSpacingInput.value = \"\" + ((0, $813589cc5cb274c7$export$8e0657814ad0f535)(selectedTextSpan.style.letterSpacing) ?? 0);\n        textForm.wordSpacingInput.value = \"\" + ((0, $813589cc5cb274c7$export$8e0657814ad0f535)(selectedTextSpan.style.wordSpacing) ?? 0);\n        textForm.leadingInput.value = \"\" + leading;\n        textForm.languageEnabledCheckbox.checked = selectedTextSpan.hasAttribute(\"data-lang\");\n        textForm.languageInput.value = selectedTextSpan.getAttribute(\"data-lang\") ?? \"\";\n        textForm.altTextEnabledCheckbox.checked = selectedTextSpan.hasAttribute(\"data-alt-text\");\n        textForm.altTextInput.value = selectedTextSpan.getAttribute(\"data-alt-text\") ?? \"\";\n        textForm.actualTextEnabledCheckbox.checked = selectedTextSpan.hasAttribute(\"data-actual-text\");\n        textForm.actualTextInput.value = selectedTextSpan.getAttribute(\"data-actual-text\") ?? \"\";\n        textForm.expansionEnabledCheckbox.checked = selectedTextSpan.hasAttribute(\"data-expansion\");\n        textForm.expansionTextInput.value = selectedTextSpan.getAttribute(\"data-expansion\") ?? \"\";\n    }\n    function addTextSpan() {\n        if (textForm === null) return;\n        if (selectedText === null) return;\n        const newTextChunk = (0, $f9701a97a713f0ee$export$e3ca8059b2de989).createDefaultTextChunk(\"lorem ipsum\");\n        (0, $f9701a97a713f0ee$export$e3ca8059b2de989).makeTSpanFromTextChunk(selectedText, newTextChunk);\n        // also add an option to the selection box and select it\n        const option = document.createElement(\"option\");\n        option.text = newTextChunk.text;\n        textForm.textSpanSelect.appendChild(option);\n        textForm.textSpanSelect.selectedIndex = textForm.textSpanSelect.options.length - 1;\n    }\n    function removeTextSpan() {\n        if (textForm === null) return;\n        if (selectedText === null) return;\n        if (textForm.textSpanSelect.selectedIndex === -1) return;\n        const tspans = (0, $813589cc5cb274c7$export$cba25e9bb6cb9e56)(selectedText, (0, $813589cc5cb274c7$export$276d1de0bc02ff5b), \"tspan\");\n        if (textForm.textSpanSelect.selectedIndex >= tspans.length) return;\n        const tspanToDelete = tspans[textForm.textSpanSelect.selectedIndex];\n        if (tspanToDelete.parentElement !== null) tspanToDelete.parentElement.removeChild(tspanToDelete);\n        textForm.textSpanSelect.options.remove(textForm.textSpanSelect.selectedIndex);\n    }\n    function updateTextSpan() {\n        if (textForm === null) return;\n        if (selectedTextSpan === null) return;\n        const lineHeight = +textForm.leadingInput.value + +textForm.fontSizeInput.value;\n        selectedTextSpan.textContent = textForm.textArea.value;\n        selectedTextSpan.style.fontWeight = textForm.fontBoldCheckbox.checked ? \"bold\" : \"\";\n        selectedTextSpan.style.fontStyle = textForm.fontItalicCheckbox.checked ? \"italic\" : \"\";\n        selectedTextSpan.style.fontSize = `${textForm.fontSizeInput.value}pt`;\n        selectedTextSpan.style.letterSpacing = `${textForm.charSpacingInput.value}pt`;\n        selectedTextSpan.style.wordSpacing = `${textForm.wordSpacingInput.value}pt`;\n        selectedTextSpan.style.lineHeight = `${lineHeight}pt`;\n        const CHECKBOXES_INPUTS_AND_ATTRIBUTES = [\n            [\n                textForm.languageEnabledCheckbox,\n                textForm.languageInput,\n                \"data-lang\"\n            ],\n            [\n                textForm.altTextEnabledCheckbox,\n                textForm.altTextInput,\n                \"data-alt-text\"\n            ],\n            [\n                textForm.actualTextEnabledCheckbox,\n                textForm.actualTextInput,\n                \"data-actual-text\"\n            ],\n            [\n                textForm.expansionEnabledCheckbox,\n                textForm.expansionTextInput,\n                \"data-expansion\"\n            ]\n        ];\n        for (let [checkbox, input, attribute] of CHECKBOXES_INPUTS_AND_ATTRIBUTES)if (checkbox.checked) selectedTextSpan.setAttribute(attribute, input.value);\n        else selectedTextSpan.removeAttribute(attribute);\n        // update name of option too\n        if (textForm.textSpanSelect.selectedIndex !== -1) textForm.textSpanSelect.options[textForm.textSpanSelect.selectedIndex].textContent = selectedTextSpan.textContent;\n    }\n    function doInit() {\n        const editLabelSection = document.getElementById(\"pdfmcr-edit-label\");\n        const textSpanSelect = document.getElementById(\"pdfmcr-tspan-select\");\n        const textArea = document.getElementById(\"pdfmcr-textarea\");\n        const fontBoldCheckbox = document.getElementById(\"pdfmcr-font-bold-checkbox\");\n        const fontItalicCheckbox = document.getElementById(\"pdfmcr-font-italic-checkbox\");\n        const fontSizeInput = document.getElementById(\"pdfmcr-font-size\");\n        const charSpacingInput = document.getElementById(\"pdfmcr-char-spacing\");\n        const wordSpacingInput = document.getElementById(\"pdfmcr-word-spacing\");\n        const leadingInput = document.getElementById(\"pdfmcr-leading\");\n        const languageEnabledCheckbox = document.getElementById(\"pdfmcr-lang-enabled\");\n        const languageInput = document.getElementById(\"pdfmcr-lang\");\n        const altTextEnabledCheckbox = document.getElementById(\"pdfmcr-alt-text-enabled\");\n        const altTextInput = document.getElementById(\"pdfmcr-alt-text\");\n        const actualTextEnabledCheckbox = document.getElementById(\"pdfmcr-actual-text-enabled\");\n        const actualTextInput = document.getElementById(\"pdfmcr-actual-text\");\n        const expansionEnabledCheckbox = document.getElementById(\"pdfmcr-expansion-enabled\");\n        const expansionTextInput = document.getElementById(\"pdfmcr-expansion\");\n        if (editLabelSection === null) return;\n        if (textSpanSelect === null) return;\n        if (textArea === null) return;\n        if (fontBoldCheckbox === null) return;\n        if (fontItalicCheckbox === null) return;\n        if (fontSizeInput === null) return;\n        if (charSpacingInput === null) return;\n        if (wordSpacingInput === null) return;\n        if (leadingInput === null) return;\n        if (languageEnabledCheckbox === null) return;\n        if (languageInput === null) return;\n        if (altTextEnabledCheckbox === null) return;\n        if (altTextInput === null) return;\n        if (actualTextEnabledCheckbox === null) return;\n        if (actualTextInput === null) return;\n        if (expansionEnabledCheckbox === null) return;\n        if (expansionTextInput === null) return;\n        const addTextSpanButton = document.getElementById(\"pdfmcr-add-tspan-button\");\n        const removeTextSpanButton = document.getElementById(\"pdfmcr-remove-tspan-button\");\n        const updateTextSpanButton = document.getElementById(\"pdfmcr-update-tspan-button\");\n        if (addTextSpanButton === null) return;\n        if (removeTextSpanButton === null) return;\n        if (updateTextSpanButton === null) return;\n        textForm = {\n            editLabelSection: editLabelSection,\n            textSpanSelect: textSpanSelect,\n            textArea: textArea,\n            fontBoldCheckbox: fontBoldCheckbox,\n            fontItalicCheckbox: fontItalicCheckbox,\n            fontSizeInput: fontSizeInput,\n            charSpacingInput: charSpacingInput,\n            wordSpacingInput: wordSpacingInput,\n            leadingInput: leadingInput,\n            languageEnabledCheckbox: languageEnabledCheckbox,\n            languageInput: languageInput,\n            altTextEnabledCheckbox: altTextEnabledCheckbox,\n            altTextInput: altTextInput,\n            actualTextEnabledCheckbox: actualTextEnabledCheckbox,\n            actualTextInput: actualTextInput,\n            expansionEnabledCheckbox: expansionEnabledCheckbox,\n            expansionTextInput: expansionTextInput\n        };\n        textSpanSelect.addEventListener(\"change\", textSpanSelected);\n        addTextSpanButton.addEventListener(\"click\", addTextSpan);\n        removeTextSpanButton.addEventListener(\"click\", removeTextSpan);\n        updateTextSpanButton.addEventListener(\"click\", updateTextSpan);\n    }\n    function init() {\n        document.addEventListener(\"DOMContentLoaded\", doInit);\n    }\n    TextManagement.init = init;\n})($271df92eb01208eb$export$b35169942a03d518 || ($271df92eb01208eb$export$b35169942a03d518 = {}));\nvar $271df92eb01208eb$export$b35169942a03d518;\n\n\n(function(Annotations) {\n    let dragStart = null;\n    let dragEvents = [];\n    let selectedRect = null;\n    function setGroupPos(annotationGroup, clientX, clientY) {\n        if (dragStart === null) return null;\n        const svgRoot = annotationGroup.ownerSVGElement;\n        if (svgRoot === null) return null;\n        const transform = svgRoot.createSVGTransform();\n        transform.setTranslate(dragStart.x + clientX, dragStart.y + clientY);\n        annotationGroup.transform.baseVal.initialize(transform);\n        return svgRoot;\n    }\n    function rectMoved(annotationGroup, event) {\n        setGroupPos(annotationGroup, event.clientX, event.clientY);\n    }\n    function rectReleased(annotationGroup, event) {\n        if (event.button !== 0) // not the left mouse button; ignore\n        return;\n        const svgRoot = setGroupPos(annotationGroup, event.clientX, event.clientY);\n        if (svgRoot === null) return;\n        // forget all events\n        const removeTheseEvents = dragEvents.splice(0, dragEvents.length);\n        for (let removeThisEvent of removeTheseEvents)svgRoot.removeEventListener(removeThisEvent[0], removeThisEvent[1]);\n        // forget the drag state\n        dragStart = null;\n    }\n    function rectGrabbed(rect, annotationGroup, event) {\n        if (event.button !== 0) // not the left mouse button; ignore\n        return;\n        // do not pass through to group\n        event.stopPropagation();\n        // color the previous rect white again\n        if (selectedRect !== null) selectedRect.style.fill = \"#fff\";\n        selectedRect = rect;\n        // color our rect red\n        rect.style.fill = \"#f00\";\n        // tell the editor form that things have changed\n        const annotationTexts = annotationGroup.getElementsByTagNameNS((0, $813589cc5cb274c7$export$276d1de0bc02ff5b), \"text\");\n        if (annotationTexts.length > 0) (0, $271df92eb01208eb$export$b35169942a03d518).textSelected(annotationTexts[0]);\n        const svgRoot = annotationGroup.ownerSVGElement;\n        if (svgRoot === null) return;\n        // where is the group now?\n        const curPos = (0, $813589cc5cb274c7$export$3ae71ba538136673)(annotationGroup, SVGLength.SVG_LENGTHTYPE_NUMBER);\n        if (curPos === null) return;\n        dragStart = {\n            x: curPos.x - event.clientX,\n            y: curPos.y - event.clientY\n        };\n        // set up more events\n        const moveEvent = (e)=>rectMoved(annotationGroup, e);\n        dragEvents.push([\n            \"mousemove\",\n            moveEvent\n        ]);\n        svgRoot.addEventListener(\"mousemove\", moveEvent);\n        const releaseEvent = (e)=>rectReleased(annotationGroup, e);\n        dragEvents.push([\n            \"mouseup\",\n            releaseEvent\n        ]);\n        svgRoot.addEventListener(\"mouseup\", releaseEvent);\n    }\n    function createDefaultTextChunk(initialText) {\n        return {\n            text: initialText,\n            font_variant: \"Regular\",\n            font_size: 12,\n            character_spacing: 0,\n            word_spacing: 0,\n            leading: 0,\n            language: null,\n            alternate_text: null,\n            actual_text: null,\n            expansion: null\n        };\n    }\n    Annotations.createDefaultTextChunk = createDefaultTextChunk;\n    function createDefaultAnnotation(initialText) {\n        return {\n            left: 0,\n            bottom: 0,\n            elements: [\n                createDefaultTextChunk(initialText)\n            ]\n        };\n    }\n    function makeTSpanFromTextChunk(annoTextElem, textChunk) {\n        const lineHeightPt = textChunk.font_size + textChunk.leading;\n        const annoTSpanElem = document.createElementNS((0, $813589cc5cb274c7$export$276d1de0bc02ff5b), \"tspan\");\n        annoTSpanElem.style.fontSize = `${textChunk.font_size}pt`;\n        annoTSpanElem.style.letterSpacing = `${textChunk.character_spacing}pt`;\n        annoTSpanElem.style.wordSpacing = `${textChunk.word_spacing}pt`;\n        annoTSpanElem.style.lineHeight = `${lineHeightPt}pt`;\n        annoTextElem.appendChild(annoTSpanElem);\n        if (textChunk.language !== null) annoTSpanElem.setAttribute(\"data-language\", textChunk.language);\n        if (textChunk.alternate_text !== null) annoTSpanElem.setAttribute(\"data-alternate-text\", textChunk.alternate_text);\n        if (textChunk.actual_text !== null) annoTSpanElem.setAttribute(\"data-actual-text\", textChunk.actual_text);\n        if (textChunk.expansion !== null) annoTSpanElem.setAttribute(\"data-expansion\", textChunk.expansion);\n        const annoTextNode = document.createTextNode(textChunk.text);\n        annoTSpanElem.appendChild(annoTextNode);\n        return annoTSpanElem;\n    }\n    Annotations.makeTSpanFromTextChunk = makeTSpanFromTextChunk;\n    function makeGroupFromAnnotation(pageGroup, pageHeightPt, annotation) {\n        const svgRoot = pageGroup.ownerSVGElement;\n        if (svgRoot === null) return null;\n        // convert coordinates to pixels\n        const lengther = svgRoot.createSVGLength();\n        lengther.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PT, annotation.left);\n        lengther.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_NUMBER);\n        const xPx = lengther.valueInSpecifiedUnits;\n        lengther.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PT, pageHeightPt - annotation.bottom);\n        lengther.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_NUMBER);\n        const yPx = lengther.valueInSpecifiedUnits;\n        const annoGroup = document.createElementNS((0, $813589cc5cb274c7$export$276d1de0bc02ff5b), \"g\");\n        annoGroup.classList.add(\"annotation\");\n        const transform = svgRoot.createSVGTransform();\n        transform.setTranslate(xPx, yPx);\n        annoGroup.transform.baseVal.initialize(transform);\n        const annoTextElem = document.createElementNS((0, $813589cc5cb274c7$export$276d1de0bc02ff5b), \"text\");\n        annoTextElem.style.fill = \"#000\";\n        annoGroup.appendChild(annoTextElem);\n        for (let element of annotation.elements)makeTSpanFromTextChunk(annoTextElem, element);\n        const grabRect = document.createElementNS((0, $813589cc5cb274c7$export$276d1de0bc02ff5b), \"rect\");\n        grabRect.x.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PT, 0);\n        grabRect.y.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PT, 0);\n        grabRect.width.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PT, 10);\n        grabRect.height.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PT, 10);\n        grabRect.style.fill = \"#fff\";\n        grabRect.style.fillOpacity = \"0.5\";\n        grabRect.addEventListener(\"mousedown\", (event)=>rectGrabbed(grabRect, annoGroup, event));\n        annoGroup.appendChild(grabRect);\n        pageGroup.appendChild(annoGroup);\n        return annoGroup;\n    }\n    function newAnnotationFormSubmit(textBox, event) {\n        event.preventDefault();\n        const annotationText = textBox.value;\n        const pageGroup = document.getElementById(\"pdfmcr-page-group\");\n        if (pageGroup === null) return;\n        const imageHeightPt = (0, $813589cc5cb274c7$export$18ec489782ea8e1f)(pageGroup);\n        if (imageHeightPt === null) return;\n        const freshAnnotation = createDefaultAnnotation(annotationText);\n        makeGroupFromAnnotation(pageGroup, imageHeightPt, freshAnnotation);\n    }\n    function hookUpNewAnnotationForm() {\n        const newAnnotationForm = document.getElementById(\"pdfmcr-new-annotation-form\");\n        if (newAnnotationForm === null) return;\n        const textBox = newAnnotationForm.querySelector(\"input[type=text]\");\n        if (textBox === null) return;\n        newAnnotationForm.addEventListener(\"submit\", (event)=>newAnnotationFormSubmit(textBox, event));\n    }\n    function realizeExistingAnnotations(existingAnnotations) {\n        const pageGroup = document.getElementById(\"pdfmcr-page-group\");\n        if (pageGroup === null) return;\n        const imageHeightPt = (0, $813589cc5cb274c7$export$18ec489782ea8e1f)(pageGroup);\n        if (imageHeightPt === null) return;\n        for (let annotation of existingAnnotations.annotations)makeGroupFromAnnotation(pageGroup, imageHeightPt, annotation);\n    }\n    function doInit(existingAnnotations) {\n        realizeExistingAnnotations(existingAnnotations);\n        hookUpNewAnnotationForm();\n    }\n    function init(existingAnnotations) {\n        if (existingAnnotations === undefined) existingAnnotations = {\n            annotations: [],\n            artifacts: []\n        };\n        document.addEventListener(\"DOMContentLoaded\", ()=>doInit(existingAnnotations));\n    }\n    Annotations.init = init;\n})($f9701a97a713f0ee$export$e3ca8059b2de989 || ($f9701a97a713f0ee$export$e3ca8059b2de989 = {}));\nvar $f9701a97a713f0ee$export$e3ca8059b2de989;\n\n\n\n(function(Serialize) {\n    function serializeAnnotation(annotationGroup, imageHeightPt) {\n        const svgRoot = annotationGroup.ownerSVGElement;\n        if (svgRoot === null) return null;\n        const pos = (0, $813589cc5cb274c7$export$3ae71ba538136673)(annotationGroup, SVGLength.SVG_LENGTHTYPE_PT);\n        if (pos === null) return null;\n        const textChildren = annotationGroup.getElementsByTagNameNS((0, $813589cc5cb274c7$export$276d1de0bc02ff5b), \"text\");\n        if (textChildren.length === 0) return null;\n        const textChild = textChildren[0];\n        const elements = [];\n        for (let rawChild of textChild.children){\n            if (rawChild.namespaceURI !== (0, $813589cc5cb274c7$export$276d1de0bc02ff5b)) continue;\n            if (rawChild.localName !== \"tspan\") continue;\n            const tspan = rawChild;\n            const fontSizePt = (0, $813589cc5cb274c7$export$8e0657814ad0f535)(tspan.style.fontSize);\n            const characterSpacingPt = (0, $813589cc5cb274c7$export$8e0657814ad0f535)(tspan.style.letterSpacing);\n            const wordSpacingPt = (0, $813589cc5cb274c7$export$8e0657814ad0f535)(tspan.style.wordSpacing);\n            const lineHeightPt = (0, $813589cc5cb274c7$export$8e0657814ad0f535)(tspan.style.lineHeight);\n            const isBold = tspan.style.fontWeight === \"bold\";\n            const isItalic = tspan.style.fontStyle === \"italic\";\n            if (fontSizePt === null) continue;\n            if (characterSpacingPt === null) continue;\n            if (wordSpacingPt === null) continue;\n            if (lineHeightPt === null) continue;\n            const leadingPt = lineHeightPt - fontSizePt;\n            const children = tspan.childNodes;\n            if (children.length !== 1) return null;\n            if (children[0].nodeType !== Node.TEXT_NODE) return null;\n            const text = children[0].textContent;\n            if (text === null) return null;\n            const fontVariant = isBold ? isItalic ? \"BoldItalic\" : \"Bold\" : isItalic ? \"Italic\" : \"Regular\";\n            const language = tspan.getAttribute(\"data-lang\");\n            const alternate_text = tspan.getAttribute(\"data-alt-text\");\n            const actual_text = tspan.getAttribute(\"data-actual-text\");\n            const expansion = tspan.getAttribute(\"data-expansion\");\n            elements.push({\n                text: text,\n                font_variant: fontVariant,\n                font_size: Math.round(fontSizePt),\n                character_spacing: Math.round(characterSpacingPt),\n                word_spacing: Math.round(wordSpacingPt),\n                leading: Math.round(leadingPt),\n                language: language,\n                alternate_text: alternate_text,\n                actual_text: actual_text,\n                expansion: expansion\n            });\n        }\n        return {\n            left: Math.round(pos.x),\n            bottom: Math.round(imageHeightPt - pos.y),\n            elements: elements\n        };\n    }\n    function serialize(pageGroup) {\n        const ret = {\n            annotations: [],\n            artifacts: []\n        };\n        const imageHeightPt = (0, $813589cc5cb274c7$export$18ec489782ea8e1f)(pageGroup);\n        for (let child of pageGroup.children){\n            if (child.namespaceURI !== (0, $813589cc5cb274c7$export$276d1de0bc02ff5b)) continue;\n            if (child.localName === \"g\") {\n                const gChild = child;\n                if (gChild.classList.contains(\"annotation\")) {\n                    if (imageHeightPt === null) continue;\n                    // it's an annotation!\n                    const annotation = serializeAnnotation(gChild, imageHeightPt);\n                    if (annotation === null) continue;\n                    ret.annotations.push(annotation);\n                } else if (gChild.classList.contains(\"artifact\")) {\n                    if (imageHeightPt === null) continue;\n                    let artifactKind = null;\n                    if (gChild.classList.contains(\"background\")) artifactKind = \"Background\";\n                    else if (gChild.classList.contains(\"layout\")) artifactKind = \"Layout\";\n                    else if (gChild.classList.contains(\"page\")) artifactKind = \"Page\";\n                    else if (gChild.classList.contains(\"pagination\")) artifactKind = \"Pagination\";\n                    else continue;\n                    const annotation = serializeAnnotation(gChild, imageHeightPt);\n                    if (annotation === null) continue;\n                    ret.artifacts.push({\n                        kind: artifactKind,\n                        annotation: annotation\n                    });\n                }\n            }\n        }\n        return ret;\n    }\n    Serialize.serialize = serialize;\n    async function doSave() {\n        // find the page group\n        const pageGroup = document.getElementById(\"pdfmcr-page-group\");\n        if (pageGroup === null) {\n            alert(\"cannot save: page group not found\");\n            return;\n        }\n        // find the number of the page\n        const metaElement = document.querySelector(\"meta[name=\\\"pdfmcr-page-number\\\"]\");\n        if (metaElement === null) {\n            alert(\"cannot save: page number meta element not found\");\n            return;\n        }\n        const pageNumber = +metaElement.content;\n        const pageAnnotations = serialize(pageGroup);\n        const request = new Request(`/page/${pageNumber}/annotations`, {\n            method: \"POST\",\n            body: JSON.stringify(pageAnnotations),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        let success = false;\n        try {\n            const response = await fetch(request);\n            const responseText = response.text();\n            if (response.status !== 200) alert(\"cannot save: \" + responseText);\n            else success = true;\n        } catch (errorPromise) {\n            let error = await errorPromise;\n            alert(\"cannot save: \" + error);\n        }\n        if (success) alert(\"saved!\");\n    }\n    function doInit() {\n        const saveButton = document.getElementById(\"pdfmcr-save-button\");\n        if (saveButton === null) return;\n        saveButton.addEventListener(\"click\", doSave);\n    }\n    function init() {\n        document.addEventListener(\"DOMContentLoaded\", doInit);\n    }\n    Serialize.init = init;\n})($0f25fb17441acb62$export$d38cf224d56e3ace || ($0f25fb17441acb62$export$d38cf224d56e3ace = {}));\nvar $0f25fb17441acb62$export$d38cf224d56e3ace;\n\n\nclass $1929f88661691794$var$KeyValuePair {\n    constructor(key, value){\n        this.key = key;\n        this.value = value;\n    }\n    getKey() {\n        return this.key;\n    }\n    getValue() {\n        return this.value;\n    }\n}\nconst $1929f88661691794$export$26cc3c52be8321f4 = Symbol();\nclass $1929f88661691794$export$b2b4abe18efe1588 {\n    /// Creates an empty key-value map.\n    constructor(){\n        this.entries = [];\n    }\n    /// Returns the index into `this.entries` for the given key.\n    getIndexForKey(key) {\n        for(let i = 0; i < this.entries.length; i++){\n            if (this.entries[i].getKey() === key) return i;\n        }\n        return null;\n    }\n    /// Sets the value for `key` to `value` and returns the previous value.\n    ///\n    /// Returns the singleton `NoValue` if no value was stored for that key.\n    set(key, value) {\n        const index = this.getIndexForKey(key);\n        if (index !== null) {\n            const ret = this.entries[index].getValue();\n            this.entries[index] = new $1929f88661691794$var$KeyValuePair(this.entries[index].getKey(), value);\n            return ret;\n        }\n        this.entries.push(new $1929f88661691794$var$KeyValuePair(key, value));\n        return $1929f88661691794$export$26cc3c52be8321f4;\n    }\n    /// Obtains the value for `key`.\n    ///\n    /// Returns the singleton `NoValue` if no value was stored for that key.\n    get(key) {\n        const index = this.getIndexForKey(key);\n        if (index !== null) return this.entries[index].getValue();\n        return $1929f88661691794$export$26cc3c52be8321f4;\n    }\n    /// Obtains the value for `key` and removes this key-value pair from the map.\n    ///\n    /// Returns the singleton `NoValue` if no value was stored for that key.\n    remove(key) {\n        const index = this.getIndexForKey(key);\n        if (index !== null) {\n            const removedKvps = this.entries.splice(index, 1);\n            return removedKvps[0].getValue();\n        }\n        return $1929f88661691794$export$26cc3c52be8321f4;\n    }\n    /// Returns the number of entries in the map.\n    length() {\n        return this.entries.length;\n    }\n    /// Returns an array containing all the keys in the map.\n    ///\n    /// Note that modifying the keys can lead to unexpected behavior of the map, so, like, don't.\n    keys() {\n        const ret = [];\n        for(let i = 0; i < this.entries.length; i++)ret.push(this.entries[i].getKey());\n        return ret;\n    }\n}\n\n\n(function(Splitter) {\n    const activeDocumentEvents = [];\n    const splitterToStartState = new (0, $1929f88661691794$export$b2b4abe18efe1588)();\n    function mouseReleased() {\n        // disable the active document events\n        const disableUs = activeDocumentEvents.splice(0, activeDocumentEvents.length);\n        for(let i = 0; i < disableUs.length; i++)document.removeEventListener(disableUs[i][0], disableUs[i][1]);\n    }\n    function mouseMoved(splitter, event) {\n        const startState = splitterToStartState.get(splitter);\n        if (startState === (0, $1929f88661691794$export$26cc3c52be8321f4)) return;\n        const leftPane = splitter.previousElementSibling;\n        const rightPane = splitter.nextElementSibling;\n        if (leftPane === null || rightPane === null) return;\n        const difference = {\n            x: event.clientX - startState.startPosition.x,\n            y: event.clientY - startState.startPosition.y\n        };\n        if (difference.x < -startState.leftPaneWidth) difference.x = -startState.leftPaneWidth;\n        if (difference.x > startState.rightPaneWidth) difference.x = startState.rightPaneWidth;\n        splitter.style.left = `${startState.splitterLeft + difference.x}px`;\n        leftPane.style.width = `${startState.leftPaneWidth + difference.x}px`;\n        rightPane.style.width = `${startState.rightPaneWidth - difference.x}px`;\n    }\n    function activateSplitter(splitter, event) {\n        const leftPane = splitter.previousElementSibling;\n        const rightPane = splitter.nextElementSibling;\n        if (leftPane === null || rightPane === null) return;\n        splitterToStartState.set(splitter, {\n            startPosition: {\n                x: event.clientX,\n                y: event.clientY\n            },\n            splitterLeft: splitter.offsetLeft,\n            splitterTop: splitter.offsetTop,\n            leftPaneWidth: leftPane.offsetWidth,\n            rightPaneWidth: rightPane.offsetWidth\n        });\n        const moveHandler = (moveEvent)=>mouseMoved(splitter, moveEvent);\n        document.addEventListener(\"mousemove\", moveHandler);\n        activeDocumentEvents.push([\n            \"mousemove\",\n            moveHandler\n        ]);\n        const releaseHandler = ()=>mouseReleased();\n        document.addEventListener(\"mouseup\", releaseHandler);\n        activeDocumentEvents.push([\n            \"mouseup\",\n            releaseHandler\n        ]);\n    }\n    function initContainer(container) {\n        const panes = container.getElementsByClassName(\"spl-pane\");\n        for (const pane of panes){\n            pane.style.flexGrow = \"1\";\n            pane.style.flexShrink = \"1\";\n            pane.style.flexBasis = \"auto\";\n            pane.style.overflow = \"hidden\";\n        }\n        const splitters = container.getElementsByClassName(\"spl-splitter\");\n        for (const splitter of splitters){\n            splitter.style.width = \"8px\";\n            splitter.style.height = \"100%\";\n            splitter.style.cursor = \"col-resize\";\n            splitter.style.userSelect = \"none\";\n            splitter.addEventListener(\"mousedown\", (event)=>activateSplitter(splitter, event));\n        }\n    }\n    function doInit() {\n        // initialize each splitter container\n        const splitterContainers = document.getElementsByClassName(\"spl-splitter-container\");\n        for (const splitterContainer of splitterContainers)initContainer(splitterContainer);\n    }\n    function init() {\n        document.addEventListener(\"DOMContentLoaded\", doInit);\n    }\n    Splitter.init = init;\n})($e0fcd71990a6304d$export$980082fdfafd21f8 || ($e0fcd71990a6304d$export$980082fdfafd21f8 = {}));\nvar $e0fcd71990a6304d$export$980082fdfafd21f8;\n\n\n(function(SvgDrag) {\n    let dragStart = null;\n    let currentImageScale = 1.0;\n    let currentImageOffset = {\n        x: 0,\n        y: 0\n    };\n    const dragEvents = [];\n    function updateGroupTransform(groupElem) {\n        const svgRoot = groupElem.ownerSVGElement;\n        if (svgRoot === null) // can't do much\n        return;\n        const scaling = svgRoot.createSVGTransform();\n        scaling.setScale(currentImageScale, currentImageScale);\n        const translation = svgRoot.createSVGTransform();\n        translation.setTranslate(currentImageOffset.x, currentImageOffset.y);\n        groupElem.transform.baseVal.initialize(scaling);\n        groupElem.transform.baseVal.appendItem(translation);\n    }\n    function resetView(groupElem) {\n        currentImageOffset = {\n            x: 0,\n            y: 0\n        };\n        currentImageScale = 1.0;\n        updateGroupTransform(groupElem);\n    }\n    function performZoom(groupElem, factor) {\n        currentImageScale *= factor;\n        updateGroupTransform(groupElem);\n    }\n    function groupDragOver(groupElem, overEvent) {\n        if (dragStart === null) // can't do much\n        return;\n        currentImageOffset = {\n            x: (overEvent.clientX - dragStart.x) / currentImageScale,\n            y: (overEvent.clientY - dragStart.y) / currentImageScale\n        };\n        // move the group there\n        updateGroupTransform(groupElem);\n    }\n    function groupDragEnd(groupElem, endEvent) {\n        if (endEvent.button !== 0) // wrong button released\n        return;\n        if (dragStart === null) // meh\n        return;\n        const svgRoot = groupElem.ownerSVGElement;\n        if (svgRoot === null) return;\n        // store new position as final coordinates\n        currentImageOffset = {\n            x: (endEvent.clientX - dragStart.x) / currentImageScale,\n            y: (endEvent.clientY - dragStart.y) / currentImageScale\n        };\n        // forget start coordinates\n        dragStart = null;\n        // unregister all the drag events\n        const oldDragEvents = dragEvents.splice(0, dragEvents.length);\n        for (let oldDragEvent of oldDragEvents)svgRoot.removeEventListener(oldDragEvent[0], oldDragEvent[1]);\n        // update one last time\n        updateGroupTransform(groupElem);\n    }\n    function registerDragEvent(element, eventName, handler) {\n        element.addEventListener(eventName, handler);\n        dragEvents.push([\n            eventName,\n            handler\n        ]);\n    }\n    function groupDragStarted(groupElem, startEvent) {\n        if (startEvent.button !== 0) return;\n        const svgRoot = groupElem.ownerSVGElement;\n        if (svgRoot === null) return;\n        dragStart = {\n            x: startEvent.offsetX - currentImageOffset.x * currentImageScale,\n            y: startEvent.offsetY - currentImageOffset.y * currentImageScale\n        };\n        registerDragEvent(svgRoot, \"mousemove\", (overEvent)=>groupDragOver(groupElem, overEvent));\n        registerDragEvent(svgRoot, \"mouseup\", (endEvent)=>groupDragEnd(groupElem, endEvent));\n    }\n    function doInit() {\n        const groupElem = document.getElementById(\"pdfmcr-page-group\");\n        if (groupElem === null) return;\n        groupElem.addEventListener(\"mousedown\", (startEvent)=>groupDragStarted(groupElem, startEvent));\n        const zoomInButton = document.getElementById(\"pdfmcr-zoom-in-button\");\n        if (zoomInButton !== null) zoomInButton.addEventListener(\"click\", ()=>performZoom(groupElem, 1.5));\n        const zoomOutButton = document.getElementById(\"pdfmcr-zoom-out-button\");\n        if (zoomOutButton !== null) zoomOutButton.addEventListener(\"click\", ()=>performZoom(groupElem, 2.0 / 3.0));\n        const resetViewButton = document.getElementById(\"pdfmcr-reset-view-button\");\n        if (resetViewButton !== null) resetViewButton.addEventListener(\"click\", ()=>resetView(groupElem));\n    }\n    function init() {\n        document.addEventListener(\"DOMContentLoaded\", doInit);\n    }\n    SvgDrag.init = init;\n})($cd3c29b10a227d00$export$9bf3ed2c8368b180 || ($cd3c29b10a227d00$export$9bf3ed2c8368b180 = {}));\nvar $cd3c29b10a227d00$export$9bf3ed2c8368b180;\n\n\n\n\"use strict\";\nwindow.PdfMcr = {\n    Annotations: (0, $f9701a97a713f0ee$export$e3ca8059b2de989),\n    Serialize: (0, $0f25fb17441acb62$export$d38cf224d56e3ace),\n    Splitter: (0, $e0fcd71990a6304d$export$980082fdfafd21f8),\n    SvgDrag: (0, $cd3c29b10a227d00$export$9bf3ed2c8368b180),\n    TextManagement: (0, $271df92eb01208eb$export$b35169942a03d518),\n    init: function() {\n        window.PdfMcr.Serialize.init();\n        window.PdfMcr.Splitter.init();\n        window.PdfMcr.SvgDrag.init();\n        window.PdfMcr.TextManagement.init();\n    }\n};\n\n})();\n//# sourceMappingURL=main.js.map\n","\"use strict\";\r\n\r\nimport { Annotations } from \"./annotations\";\r\nimport { Serialize } from \"./serialize\";\r\nimport { Splitter } from \"./splitter\";\r\nimport { SvgDrag } from \"./svgdrag\";\r\nimport { TextManagement } from \"./textmgmt\";\r\n\r\n// \"globals are evil\"\r\ndeclare global {\r\n    interface Window { PdfMcr: any; }\r\n}\r\nwindow.PdfMcr = {\r\n    Annotations: Annotations,\r\n    Serialize: Serialize,\r\n    Splitter: Splitter,\r\n    SvgDrag: SvgDrag,\r\n    TextManagement: TextManagement,\r\n    init: function () {\r\n        window.PdfMcr.Serialize.init();\r\n        window.PdfMcr.Splitter.init();\r\n        window.PdfMcr.SvgDrag.init();\r\n        window.PdfMcr.TextManagement.init();\r\n    }\r\n};\r\n","import { getImageHeightPt, Position, positionFromTranslate, SVG_NS } from \"./common\";\r\nimport { Annotation, PageAnnotations, TextChunk } from \"./model\";\r\nimport { TextManagement } from \"./textmgmt\";\r\n\r\nexport namespace Annotations {\r\n    let dragStart: Position|null = null;\r\n    let dragEvents: [\"mousemove\"|\"mouseup\", any][] = [];\r\n    let selectedRect: SVGRectElement|null = null;\r\n\r\n    function setGroupPos(annotationGroup: SVGGElement, clientX: number, clientY: number): SVGSVGElement|null {\r\n        if (dragStart === null) {\r\n            return null;\r\n        }\r\n\r\n        const svgRoot = annotationGroup.ownerSVGElement;\r\n        if (svgRoot === null) {\r\n            return null;\r\n        }\r\n\r\n        const transform = svgRoot.createSVGTransform();\r\n        transform.setTranslate(\r\n            dragStart.x + clientX,\r\n            dragStart.y + clientY,\r\n        );\r\n        annotationGroup.transform.baseVal.initialize(transform);\r\n\r\n        return svgRoot;\r\n    }\r\n\r\n    function rectMoved(annotationGroup: SVGGElement, event: MouseEvent): void {\r\n        setGroupPos(annotationGroup, event.clientX, event.clientY);\r\n    }\r\n\r\n    function rectReleased(annotationGroup: SVGGElement, event: MouseEvent): void {\r\n        if (event.button !== 0) {\r\n            // not the left mouse button; ignore\r\n            return;\r\n        }\r\n\r\n        const svgRoot = setGroupPos(annotationGroup, event.clientX, event.clientY);\r\n        if (svgRoot === null) {\r\n            return;\r\n        }\r\n\r\n        // forget all events\r\n        const removeTheseEvents = dragEvents.splice(0, dragEvents.length);\r\n        for (let removeThisEvent of removeTheseEvents) {\r\n            svgRoot.removeEventListener(removeThisEvent[0], removeThisEvent[1]);\r\n        }\r\n\r\n        // forget the drag state\r\n        dragStart = null;\r\n    }\r\n\r\n    function rectGrabbed(rect: SVGRectElement, annotationGroup: SVGGElement, event: MouseEvent): void {\r\n        if (event.button !== 0) {\r\n            // not the left mouse button; ignore\r\n            return;\r\n        }\r\n\r\n        // do not pass through to group\r\n        event.stopPropagation();\r\n\r\n        // color the previous rect white again\r\n        if (selectedRect !== null) {\r\n            selectedRect.style.fill = \"#fff\";\r\n        }\r\n        selectedRect = rect;\r\n\r\n        // color our rect red\r\n        rect.style.fill = \"#f00\";\r\n\r\n        // tell the editor form that things have changed\r\n        const annotationTexts = annotationGroup.getElementsByTagNameNS(SVG_NS, \"text\");\r\n        if (annotationTexts.length > 0) {\r\n            TextManagement.textSelected(<SVGTextElement>annotationTexts[0]);\r\n        }\r\n\r\n        const svgRoot = annotationGroup.ownerSVGElement;\r\n        if (svgRoot === null) {\r\n            return;\r\n        }\r\n\r\n        // where is the group now?\r\n        const curPos = positionFromTranslate(annotationGroup, SVGLength.SVG_LENGTHTYPE_NUMBER);\r\n        if (curPos === null) {\r\n            return;\r\n        }\r\n\r\n        dragStart = {\r\n            x: curPos.x - event.clientX,\r\n            y: curPos.y - event.clientY,\r\n        };\r\n\r\n        // set up more events\r\n        const moveEvent = e => rectMoved(annotationGroup, e);\r\n        dragEvents.push([\"mousemove\", moveEvent]);\r\n        svgRoot.addEventListener(\"mousemove\", moveEvent);\r\n\r\n        const releaseEvent = e => rectReleased(annotationGroup, e);\r\n        dragEvents.push([\"mouseup\", releaseEvent]);\r\n        svgRoot.addEventListener(\"mouseup\", releaseEvent);\r\n    }\r\n\r\n    export function createDefaultTextChunk(initialText: string): TextChunk {\r\n        return {\r\n            text: initialText,\r\n            font_variant: \"Regular\",\r\n            font_size: 12,\r\n            character_spacing: 0,\r\n            word_spacing: 0,\r\n            leading: 0,\r\n            language: null,\r\n            alternate_text: null,\r\n            actual_text: null,\r\n            expansion: null,\r\n        };\r\n    }\r\n\r\n    function createDefaultAnnotation(initialText: string): Annotation {\r\n        return {\r\n            left: 0,\r\n            bottom: 0,\r\n            elements: [\r\n                createDefaultTextChunk(initialText),\r\n            ],\r\n        };\r\n    }\r\n\r\n    export function makeTSpanFromTextChunk(annoTextElem: SVGTextElement, textChunk: TextChunk): SVGTSpanElement {\r\n        const lineHeightPt = textChunk.font_size + textChunk.leading;\r\n\r\n        const annoTSpanElem = document.createElementNS(SVG_NS, \"tspan\");\r\n        annoTSpanElem.style.fontSize = `${textChunk.font_size}pt`;\r\n        annoTSpanElem.style.letterSpacing = `${textChunk.character_spacing}pt`;\r\n        annoTSpanElem.style.wordSpacing = `${textChunk.word_spacing}pt`;\r\n        annoTSpanElem.style.lineHeight = `${lineHeightPt}pt`;\r\n        annoTextElem.appendChild(annoTSpanElem);\r\n\r\n        if (textChunk.language !== null) {\r\n            annoTSpanElem.setAttribute(\"data-language\", textChunk.language);\r\n        }\r\n        if (textChunk.alternate_text !== null) {\r\n            annoTSpanElem.setAttribute(\"data-alternate-text\", textChunk.alternate_text);\r\n        }\r\n        if (textChunk.actual_text !== null) {\r\n            annoTSpanElem.setAttribute(\"data-actual-text\", textChunk.actual_text);\r\n        }\r\n        if (textChunk.expansion !== null) {\r\n            annoTSpanElem.setAttribute(\"data-expansion\", textChunk.expansion);\r\n        }\r\n\r\n        const annoTextNode = document.createTextNode(textChunk.text);\r\n        annoTSpanElem.appendChild(annoTextNode);\r\n\r\n        return annoTSpanElem;\r\n    }\r\n\r\n    function makeGroupFromAnnotation(pageGroup: SVGGElement, pageHeightPt: number, annotation: Annotation): SVGGElement|null {\r\n        const svgRoot = pageGroup.ownerSVGElement;\r\n        if (svgRoot === null) {\r\n            return null;\r\n        }\r\n\r\n        // convert coordinates to pixels\r\n        const lengther = svgRoot.createSVGLength();\r\n\r\n        lengther.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PT, annotation.left);\r\n        lengther.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_NUMBER);\r\n        const xPx = lengther.valueInSpecifiedUnits;\r\n\r\n        lengther.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PT, pageHeightPt - annotation.bottom);\r\n        lengther.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_NUMBER);\r\n        const yPx = lengther.valueInSpecifiedUnits;\r\n\r\n        const annoGroup = document.createElementNS(SVG_NS, \"g\");\r\n        annoGroup.classList.add(\"annotation\");\r\n        const transform = svgRoot.createSVGTransform();\r\n        transform.setTranslate(xPx, yPx);\r\n        annoGroup.transform.baseVal.initialize(transform);\r\n\r\n        const annoTextElem = document.createElementNS(SVG_NS, \"text\");\r\n        annoTextElem.style.fill = \"#000\";\r\n        annoGroup.appendChild(annoTextElem);\r\n\r\n        for (let element of annotation.elements) {\r\n            makeTSpanFromTextChunk(annoTextElem, element);\r\n        }\r\n\r\n        const grabRect = document.createElementNS(SVG_NS, \"rect\");\r\n        grabRect.x.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PT, 0);\r\n        grabRect.y.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PT, 0);\r\n        grabRect.width.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PT, 10);\r\n        grabRect.height.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PT, 10);\r\n        grabRect.style.fill = \"#fff\";\r\n        grabRect.style.fillOpacity = \"0.5\";\r\n        grabRect.addEventListener(\"mousedown\", event => rectGrabbed(grabRect, annoGroup, event));\r\n        annoGroup.appendChild(grabRect);\r\n\r\n        pageGroup.appendChild(annoGroup);\r\n\r\n        return annoGroup;\r\n    }\r\n\r\n    function newAnnotationFormSubmit(textBox: HTMLInputElement, event: SubmitEvent): void {\r\n        event.preventDefault();\r\n        const annotationText = textBox.value;\r\n\r\n        const pageGroup = <SVGGElement|null>document.getElementById(\"pdfmcr-page-group\");\r\n        if (pageGroup === null) {\r\n            return;\r\n        }\r\n\r\n        const imageHeightPt = getImageHeightPt(pageGroup);\r\n        if (imageHeightPt === null) {\r\n            return;\r\n        }\r\n\r\n        const freshAnnotation = createDefaultAnnotation(annotationText);\r\n        makeGroupFromAnnotation(pageGroup, imageHeightPt, freshAnnotation);\r\n    }\r\n\r\n    function hookUpNewAnnotationForm(): void {\r\n        const newAnnotationForm = <HTMLFormElement|null>document.getElementById(\"pdfmcr-new-annotation-form\");\r\n        if (newAnnotationForm === null) {\r\n            return;\r\n        }\r\n\r\n        const textBox = <HTMLInputElement|null>newAnnotationForm.querySelector(\"input[type=text]\");\r\n        if (textBox === null) {\r\n            return;\r\n        }\r\n\r\n        newAnnotationForm.addEventListener(\"submit\", event => newAnnotationFormSubmit(textBox, event));\r\n    }\r\n\r\n    function realizeExistingAnnotations(existingAnnotations: PageAnnotations): void {\r\n        const pageGroup = <SVGGElement|null>document.getElementById(\"pdfmcr-page-group\");\r\n        if (pageGroup === null) {\r\n            return;\r\n        }\r\n\r\n        const imageHeightPt = getImageHeightPt(pageGroup);\r\n        if (imageHeightPt === null) {\r\n            return;\r\n        }\r\n\r\n        for (let annotation of existingAnnotations.annotations) {\r\n            makeGroupFromAnnotation(pageGroup, imageHeightPt, annotation);\r\n        }\r\n    }\r\n\r\n    function doInit(existingAnnotations: PageAnnotations): void {\r\n        realizeExistingAnnotations(existingAnnotations);\r\n        hookUpNewAnnotationForm();\r\n    }\r\n\r\n    export function init(existingAnnotations?: PageAnnotations|undefined): void {\r\n        if (existingAnnotations === undefined) {\r\n            existingAnnotations = {\r\n                annotations: [],\r\n                artifacts: [],\r\n            };\r\n        }\r\n        document.addEventListener(\"DOMContentLoaded\", () => doInit(existingAnnotations));\r\n    }\r\n}\r\n","export const SVG_NS = \"http://www.w3.org/2000/svg\";\r\n\r\nexport interface Position {\r\n    x: number,\r\n    y: number,\r\n}\r\n\r\nexport function positionFromTranslate(element: SVGGraphicsElement, svgLengthType: number): Position|null {\r\n    const svgRoot = element.ownerSVGElement;\r\n    if (svgRoot === null) {\r\n        return null;\r\n    }\r\n\r\n    const xform = element.transform.baseVal;\r\n    if (xform.length !== 1) {\r\n        return null;\r\n    }\r\n    const xform0 = xform.getItem(0);\r\n    if (xform0.type !== SVGTransform.SVG_TRANSFORM_TRANSLATE) {\r\n        return null;\r\n    }\r\n\r\n    // a transformation matrix is:\r\n    // (m11 m21 m31 m41)\r\n    // (m12 m22 m32 m42)\r\n    // (m13 m23 m33 m43)\r\n    // (m14 m24 m34 m44)\r\n    //\r\n    // or, with single-letter aliases:\r\n    // (a c _ e)\r\n    // (b d _ f)\r\n    // (_ _ _ _)\r\n    // (_ _ _ _)\r\n    //\r\n    // some browsers steadfastly refuse to support the m## variables\r\n    //\r\n    // a 2D translation is:\r\n    // (1 0 0 tx)\r\n    // (0 1 0 ty)\r\n    // (0 0 1 tz)\r\n    // (0 0 0  1)\r\n\r\n    const sizer = svgRoot.createSVGLength();\r\n\r\n    sizer.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_NUMBER, xform0.matrix.e);\r\n    sizer.convertToSpecifiedUnits(svgLengthType);\r\n    const x = sizer.valueInSpecifiedUnits;\r\n\r\n    sizer.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_NUMBER, xform0.matrix.f);\r\n    sizer.convertToSpecifiedUnits(svgLengthType);\r\n    const y = sizer.valueInSpecifiedUnits;\r\n\r\n    return { x, y };\r\n}\r\n\r\nexport function getImageHeightPt(pageGroup: SVGGElement): number|null {\r\n    // find child image\r\n    let image: SVGImageElement|null = null;\r\n    for (let child of pageGroup.children) {\r\n        if (child.namespaceURI === SVG_NS && child.tagName === \"image\") {\r\n            image = <SVGImageElement>child;\r\n            break;\r\n        }\r\n    }\r\n    if (image === null) {\r\n        return null;\r\n    }\r\n\r\n    // convert its height into points and return\r\n    image.height.baseVal.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PT);\r\n    return image.height.baseVal.valueInSpecifiedUnits;\r\n}\r\n\r\nexport function childElementsNamedNS(parent: Element, namespace: string|null, localName: string): Element[] {\r\n    const childElements = parent.children;\r\n    const namedElements: Element[] = [];\r\n    for (let i = 0; i < childElements.length; i++) {\r\n        const childElement = childElements[i];\r\n        if (childElement.namespaceURI === namespace && childElement.localName === localName) {\r\n            namedElements.push(childElement);\r\n        }\r\n    }\r\n    return namedElements;\r\n}\r\n\r\nexport function pointsValue(stringValue: string): number|null {\r\n    if (stringValue.endsWith(\"pt\")) {\r\n        return +stringValue.substring(0, stringValue.length - 2);\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n","import { childElementsNamedNS, pointsValue, SVG_NS } from './common';\r\nimport { Annotations } from './annotations';\r\n\r\n\r\nexport namespace TextManagement {\r\n    interface TextForm {\r\n        editLabelSection: HTMLDivElement,\r\n\r\n        textSpanSelect: HTMLSelectElement,\r\n\r\n        textArea: HTMLTextAreaElement,\r\n        fontBoldCheckbox: HTMLInputElement,\r\n        fontItalicCheckbox: HTMLInputElement,\r\n        fontSizeInput: HTMLInputElement,\r\n        charSpacingInput: HTMLInputElement,\r\n        wordSpacingInput: HTMLInputElement,\r\n        leadingInput: HTMLInputElement,\r\n\r\n        languageEnabledCheckbox: HTMLInputElement,\r\n        languageInput: HTMLInputElement,\r\n        altTextEnabledCheckbox: HTMLInputElement,\r\n        altTextInput: HTMLTextAreaElement,\r\n        actualTextEnabledCheckbox: HTMLInputElement,\r\n        actualTextInput: HTMLTextAreaElement,\r\n        expansionEnabledCheckbox: HTMLInputElement,\r\n        expansionTextInput: HTMLTextAreaElement,\r\n    }\r\n\r\n    let textForm: TextForm|null = null;\r\n    let selectedText: SVGTextElement|null = null;\r\n    let selectedTextSpan: SVGTSpanElement|null = null;\r\n\r\n    export function textSelected(newlySelectedText: SVGTextElement): void {\r\n        if (textForm === null) {\r\n            return;\r\n        }\r\n\r\n        selectedText = newlySelectedText;\r\n\r\n        // repopulate list of tspans\r\n        while (textForm.textSpanSelect.options.length > 0) {\r\n            textForm.textSpanSelect.options.remove(textForm.textSpanSelect.options.length - 1);\r\n        }\r\n        const tspans = childElementsNamedNS(selectedText, SVG_NS, \"tspan\");\r\n        for (let tspan of tspans) {\r\n            const option = document.createElement(\"option\");\r\n            option.textContent = tspan.textContent;\r\n            textForm.textSpanSelect.appendChild(option);\r\n        }\r\n        textForm.textSpanSelect.selectedIndex = 0;\r\n        textSpanSelected();\r\n\r\n        textForm.editLabelSection.style.display = \"\";\r\n    }\r\n\r\n    export function textDeselected(): void {\r\n        if (textForm === null) {\r\n            return;\r\n        }\r\n\r\n        textForm.editLabelSection.style.display = \"none\";\r\n        selectedText = null;\r\n        selectedTextSpan = null;\r\n    }\r\n\r\n    function textSpanSelected(): void {\r\n        if (textForm === null) {\r\n            return;\r\n        }\r\n\r\n        // pick out the text-span element\r\n        if (selectedText === null) {\r\n            return;\r\n        }\r\n        const textSpans = <SVGTSpanElement[]>childElementsNamedNS(selectedText, SVG_NS, \"tspan\");\r\n\r\n        const textSpanIndex = textForm.textSpanSelect.selectedIndex;\r\n        if (textSpanIndex === -1) {\r\n            selectedTextSpan = null;\r\n        } else if (textSpanIndex >= textSpans.length) {\r\n            // invalid selection\r\n            selectedTextSpan = null;\r\n        } else {\r\n            selectedTextSpan = textSpans[textSpanIndex];\r\n        }\r\n\r\n        if (selectedTextSpan === null) {\r\n            return;\r\n        }\r\n\r\n        // update the form\r\n\r\n        let leading = 0;\r\n        const lineHeight = pointsValue(selectedTextSpan.style.lineHeight);\r\n        const fontSize = pointsValue(selectedTextSpan.style.fontSize) ?? 12;\r\n        if (lineHeight !== null) {\r\n            leading = lineHeight - fontSize;\r\n        }\r\n\r\n        textForm.textArea.value = selectedTextSpan.textContent ?? \"\";\r\n        textForm.fontBoldCheckbox.checked = selectedTextSpan.style.fontWeight === \"bold\";\r\n        textForm.fontItalicCheckbox.checked = selectedTextSpan.style.fontStyle === \"italic\";\r\n        textForm.fontSizeInput.value = \"\" + (pointsValue(selectedTextSpan.style.fontSize) ?? 12);\r\n        textForm.charSpacingInput.value = \"\" + (pointsValue(selectedTextSpan.style.letterSpacing) ?? 0);\r\n        textForm.wordSpacingInput.value = \"\" + (pointsValue(selectedTextSpan.style.wordSpacing) ?? 0);\r\n        textForm.leadingInput.value = \"\" + leading;\r\n        textForm.languageEnabledCheckbox.checked = selectedTextSpan.hasAttribute(\"data-lang\");\r\n        textForm.languageInput.value = selectedTextSpan.getAttribute(\"data-lang\") ?? \"\";\r\n        textForm.altTextEnabledCheckbox.checked = selectedTextSpan.hasAttribute(\"data-alt-text\");\r\n        textForm.altTextInput.value = selectedTextSpan.getAttribute(\"data-alt-text\") ?? \"\";\r\n        textForm.actualTextEnabledCheckbox.checked = selectedTextSpan.hasAttribute(\"data-actual-text\");\r\n        textForm.actualTextInput.value = selectedTextSpan.getAttribute(\"data-actual-text\") ?? \"\";\r\n        textForm.expansionEnabledCheckbox.checked = selectedTextSpan.hasAttribute(\"data-expansion\");\r\n        textForm.expansionTextInput.value = selectedTextSpan.getAttribute(\"data-expansion\") ?? \"\";\r\n    }\r\n\r\n    function addTextSpan(): void {\r\n        if (textForm === null) {\r\n            return;\r\n        }\r\n        if (selectedText === null) {\r\n            return;\r\n        }\r\n\r\n        const newTextChunk = Annotations.createDefaultTextChunk(\"lorem ipsum\");\r\n        Annotations.makeTSpanFromTextChunk(selectedText, newTextChunk);\r\n\r\n        // also add an option to the selection box and select it\r\n        const option = document.createElement(\"option\");\r\n        option.text = newTextChunk.text;\r\n        textForm.textSpanSelect.appendChild(option);\r\n        textForm.textSpanSelect.selectedIndex = textForm.textSpanSelect.options.length - 1;\r\n    }\r\n\r\n    function removeTextSpan(): void {\r\n        if (textForm === null) {\r\n            return;\r\n        }\r\n        if (selectedText === null) {\r\n            return;\r\n        }\r\n        if (textForm.textSpanSelect.selectedIndex === -1) {\r\n            return;\r\n        }\r\n\r\n        const tspans = childElementsNamedNS(selectedText, SVG_NS, \"tspan\");\r\n        if (textForm.textSpanSelect.selectedIndex >= tspans.length) {\r\n            return;\r\n        }\r\n        const tspanToDelete = tspans[textForm.textSpanSelect.selectedIndex];\r\n        if (tspanToDelete.parentElement !== null) {\r\n            tspanToDelete.parentElement.removeChild(tspanToDelete);\r\n        }\r\n\r\n        textForm.textSpanSelect.options.remove(textForm.textSpanSelect.selectedIndex);\r\n    }\r\n\r\n    function updateTextSpan(): void {\r\n        if (textForm === null) {\r\n            return;\r\n        }\r\n        if (selectedTextSpan === null) {\r\n            return;\r\n        }\r\n\r\n        const lineHeight = (+textForm.leadingInput.value) + (+textForm.fontSizeInput.value);\r\n\r\n        selectedTextSpan.textContent = textForm.textArea.value;\r\n        selectedTextSpan.style.fontWeight = textForm.fontBoldCheckbox.checked ? \"bold\" : \"\";\r\n        selectedTextSpan.style.fontStyle = textForm.fontItalicCheckbox.checked ? \"italic\" : \"\";\r\n        selectedTextSpan.style.fontSize = `${textForm.fontSizeInput.value}pt`;\r\n        selectedTextSpan.style.letterSpacing = `${textForm.charSpacingInput.value}pt`;\r\n        selectedTextSpan.style.wordSpacing = `${textForm.wordSpacingInput.value}pt`;\r\n        selectedTextSpan.style.lineHeight = `${lineHeight}pt`;\r\n\r\n        const CHECKBOXES_INPUTS_AND_ATTRIBUTES: [HTMLInputElement, HTMLInputElement|HTMLTextAreaElement, string][] = [\r\n            [textForm.languageEnabledCheckbox, textForm.languageInput, \"data-lang\"],\r\n            [textForm.altTextEnabledCheckbox, textForm.altTextInput, \"data-alt-text\"],\r\n            [textForm.actualTextEnabledCheckbox, textForm.actualTextInput, \"data-actual-text\"],\r\n            [textForm.expansionEnabledCheckbox, textForm.expansionTextInput, \"data-expansion\"],\r\n        ];\r\n        for (let [checkbox, input, attribute] of CHECKBOXES_INPUTS_AND_ATTRIBUTES) {\r\n            if (checkbox.checked) {\r\n                selectedTextSpan.setAttribute(attribute, input.value);\r\n            } else {\r\n                selectedTextSpan.removeAttribute(attribute);\r\n            }\r\n        }\r\n\r\n        // update name of option too\r\n        if (textForm.textSpanSelect.selectedIndex !== -1) {\r\n            textForm.textSpanSelect.options[textForm.textSpanSelect.selectedIndex].textContent = selectedTextSpan.textContent;\r\n        }\r\n    }\r\n\r\n    function doInit(): void {\r\n        const editLabelSection = <HTMLDivElement|null>document.getElementById(\"pdfmcr-edit-label\");\r\n\r\n        const textSpanSelect = <HTMLSelectElement|null>document.getElementById(\"pdfmcr-tspan-select\");\r\n\r\n        const textArea = <HTMLTextAreaElement|null>document.getElementById(\"pdfmcr-textarea\");\r\n        const fontBoldCheckbox = <HTMLInputElement|null>document.getElementById(\"pdfmcr-font-bold-checkbox\");\r\n        const fontItalicCheckbox = <HTMLInputElement|null>document.getElementById(\"pdfmcr-font-italic-checkbox\");\r\n        const fontSizeInput = <HTMLInputElement|null>document.getElementById(\"pdfmcr-font-size\");\r\n        const charSpacingInput = <HTMLInputElement|null>document.getElementById(\"pdfmcr-char-spacing\");\r\n        const wordSpacingInput = <HTMLInputElement|null>document.getElementById(\"pdfmcr-word-spacing\");\r\n        const leadingInput = <HTMLInputElement|null>document.getElementById(\"pdfmcr-leading\");\r\n\r\n        const languageEnabledCheckbox = <HTMLInputElement|null>document.getElementById(\"pdfmcr-lang-enabled\");\r\n        const languageInput = <HTMLInputElement|null>document.getElementById(\"pdfmcr-lang\");\r\n        const altTextEnabledCheckbox = <HTMLInputElement|null>document.getElementById(\"pdfmcr-alt-text-enabled\");\r\n        const altTextInput = <HTMLTextAreaElement|null>document.getElementById(\"pdfmcr-alt-text\");\r\n        const actualTextEnabledCheckbox = <HTMLInputElement|null>document.getElementById(\"pdfmcr-actual-text-enabled\");\r\n        const actualTextInput = <HTMLTextAreaElement|null>document.getElementById(\"pdfmcr-actual-text\");\r\n        const expansionEnabledCheckbox = <HTMLInputElement|null>document.getElementById(\"pdfmcr-expansion-enabled\");\r\n        const expansionTextInput = <HTMLTextAreaElement|null>document.getElementById(\"pdfmcr-expansion\");\r\n\r\n        if (editLabelSection === null) { return; }\r\n        if (textSpanSelect === null) { return; }\r\n        if (textArea === null) { return; }\r\n        if (fontBoldCheckbox === null) { return; }\r\n        if (fontItalicCheckbox === null) { return; }\r\n        if (fontSizeInput === null) { return; }\r\n        if (charSpacingInput === null) { return; }\r\n        if (wordSpacingInput === null) { return; }\r\n        if (leadingInput === null) { return; }\r\n        if (languageEnabledCheckbox === null) { return; }\r\n        if (languageInput === null) { return; }\r\n        if (altTextEnabledCheckbox === null) { return; }\r\n        if (altTextInput === null) { return; }\r\n        if (actualTextEnabledCheckbox === null) { return; }\r\n        if (actualTextInput === null) { return; }\r\n        if (expansionEnabledCheckbox === null) { return; }\r\n        if (expansionTextInput === null) { return; }\r\n\r\n        const addTextSpanButton = <HTMLInputElement|null>document.getElementById(\"pdfmcr-add-tspan-button\");\r\n        const removeTextSpanButton = <HTMLInputElement|null>document.getElementById(\"pdfmcr-remove-tspan-button\");\r\n        const updateTextSpanButton = <HTMLInputElement|null>document.getElementById(\"pdfmcr-update-tspan-button\");\r\n\r\n        if (addTextSpanButton === null) { return; }\r\n        if (removeTextSpanButton === null) { return; }\r\n        if (updateTextSpanButton === null) { return; }\r\n\r\n        textForm = {\r\n            editLabelSection,\r\n            textSpanSelect,\r\n            textArea,\r\n            fontBoldCheckbox,\r\n            fontItalicCheckbox,\r\n            fontSizeInput,\r\n            charSpacingInput,\r\n            wordSpacingInput,\r\n            leadingInput,\r\n            languageEnabledCheckbox,\r\n            languageInput,\r\n            altTextEnabledCheckbox,\r\n            altTextInput,\r\n            actualTextEnabledCheckbox,\r\n            actualTextInput,\r\n            expansionEnabledCheckbox,\r\n            expansionTextInput,\r\n        };\r\n\r\n        textSpanSelect.addEventListener(\"change\", textSpanSelected);\r\n        addTextSpanButton.addEventListener(\"click\", addTextSpan);\r\n        removeTextSpanButton.addEventListener(\"click\", removeTextSpan);\r\n        updateTextSpanButton.addEventListener(\"click\", updateTextSpan);\r\n    }\r\n\r\n    export function init(): void {\r\n        document.addEventListener(\"DOMContentLoaded\", doInit);\r\n    }\r\n}\r\n","import { getImageHeightPt, pointsValue, positionFromTranslate, SVG_NS } from \"./common\";\r\nimport { Annotation, ArtifactKind, PageAnnotations, TextChunk } from \"./model\";\r\n\r\n\r\n// keep this in sync with src/model.rs, obviously\r\nexport namespace Serialize {\r\n    function serializeAnnotation(annotationGroup: SVGGElement, imageHeightPt: number): Annotation|null {\r\n        const svgRoot = annotationGroup.ownerSVGElement;\r\n        if (svgRoot === null) {\r\n            return null;\r\n        }\r\n\r\n        const pos = positionFromTranslate(annotationGroup, SVGLength.SVG_LENGTHTYPE_PT);\r\n        if (pos === null) {\r\n            return null;\r\n        }\r\n\r\n        const textChildren = annotationGroup.getElementsByTagNameNS(SVG_NS, \"text\");\r\n        if (textChildren.length === 0) {\r\n            return null;\r\n        }\r\n        const textChild = textChildren[0];\r\n\r\n        const elements: TextChunk[] = [];\r\n        for (let rawChild of textChild.children) {\r\n            if (rawChild.namespaceURI !== SVG_NS) {\r\n                continue;\r\n            }\r\n            if (rawChild.localName !== \"tspan\") {\r\n                continue;\r\n            }\r\n            const tspan = <SVGTSpanElement>rawChild;\r\n\r\n            const fontSizePt = pointsValue(tspan.style.fontSize);\r\n            const characterSpacingPt = pointsValue(tspan.style.letterSpacing);\r\n            const wordSpacingPt = pointsValue(tspan.style.wordSpacing);\r\n            const lineHeightPt = pointsValue(tspan.style.lineHeight);\r\n            const isBold = tspan.style.fontWeight === \"bold\";\r\n            const isItalic = tspan.style.fontStyle === \"italic\";\r\n\r\n            if (fontSizePt === null) {\r\n                continue;\r\n            }\r\n            if (characterSpacingPt === null) {\r\n                continue;\r\n            }\r\n            if (wordSpacingPt === null) {\r\n                continue;\r\n            }\r\n            if (lineHeightPt === null) {\r\n                continue;\r\n            }\r\n\r\n            const leadingPt = lineHeightPt - fontSizePt;\r\n\r\n            const children = tspan.childNodes;\r\n            if (children.length !== 1) {\r\n                return null;\r\n            }\r\n            if (children[0].nodeType !== Node.TEXT_NODE) {\r\n                return null;\r\n            }\r\n            const text = (<Text>children[0]).textContent;\r\n            if (text === null) {\r\n                return null;\r\n            }\r\n\r\n            const fontVariant = isBold\r\n                ? (isItalic ? \"BoldItalic\" : \"Bold\")\r\n                : (isItalic ? \"Italic\" : \"Regular\");\r\n\r\n            const language = tspan.getAttribute(\"data-lang\");\r\n            const alternate_text = tspan.getAttribute(\"data-alt-text\");\r\n            const actual_text = tspan.getAttribute(\"data-actual-text\");\r\n            const expansion = tspan.getAttribute(\"data-expansion\");\r\n\r\n            elements.push({\r\n                text,\r\n                font_variant: fontVariant,\r\n                font_size: Math.round(fontSizePt),\r\n                character_spacing: Math.round(characterSpacingPt),\r\n                word_spacing: Math.round(wordSpacingPt),\r\n                leading: Math.round(leadingPt),\r\n                language,\r\n                alternate_text,\r\n                actual_text,\r\n                expansion,\r\n            });\r\n        }\r\n\r\n        return {\r\n            left: Math.round(pos.x),\r\n            bottom: Math.round(imageHeightPt - pos.y),\r\n            elements,\r\n        };\r\n    }\r\n\r\n    export function serialize(pageGroup: SVGGElement): PageAnnotations {\r\n        const ret: PageAnnotations = {\r\n            annotations: [],\r\n            artifacts: [],\r\n        };\r\n\r\n        const imageHeightPt = getImageHeightPt(pageGroup);\r\n\r\n        for (let child of pageGroup.children) {\r\n            if (child.namespaceURI !== SVG_NS) {\r\n                continue;\r\n            }\r\n\r\n            if (child.localName === \"g\") {\r\n                const gChild = <SVGGElement>child;\r\n                if (gChild.classList.contains(\"annotation\")) {\r\n                    if (imageHeightPt === null) {\r\n                        continue;\r\n                    }\r\n\r\n                    // it's an annotation!\r\n                    const annotation = serializeAnnotation(gChild, imageHeightPt);\r\n                    if (annotation === null) {\r\n                        continue;\r\n                    }\r\n                    ret.annotations.push(annotation);\r\n                } else if (gChild.classList.contains(\"artifact\")) {\r\n                    if (imageHeightPt === null) {\r\n                        continue;\r\n                    }\r\n\r\n                    let artifactKind: ArtifactKind|null = null;\r\n                    if (gChild.classList.contains(\"background\")) {\r\n                        artifactKind = \"Background\";\r\n                    } else if (gChild.classList.contains(\"layout\")) {\r\n                        artifactKind = \"Layout\";\r\n                    } else if (gChild.classList.contains(\"page\")) {\r\n                        artifactKind = \"Page\";\r\n                    } else if (gChild.classList.contains(\"pagination\")) {\r\n                        artifactKind = \"Pagination\";\r\n                    } else {\r\n                        continue;\r\n                    }\r\n                    const annotation = serializeAnnotation(gChild, imageHeightPt);\r\n                    if (annotation === null) {\r\n                        continue;\r\n                    }\r\n                    ret.artifacts.push({\r\n                        kind: artifactKind,\r\n                        annotation,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    async function doSave(): Promise<void> {\r\n        // find the page group\r\n        const pageGroup = <SVGGElement|null>document.getElementById(\"pdfmcr-page-group\");\r\n        if (pageGroup === null) {\r\n            alert(\"cannot save: page group not found\");\r\n            return;\r\n        }\r\n\r\n        // find the number of the page\r\n        const metaElement = <HTMLMetaElement|null>document.querySelector(\"meta[name=\\\"pdfmcr-page-number\\\"]\");\r\n        if (metaElement === null) {\r\n            alert(\"cannot save: page number meta element not found\");\r\n            return;\r\n        }\r\n        const pageNumber = +metaElement.content;\r\n\r\n        const pageAnnotations = serialize(pageGroup);\r\n        const request = new Request(\r\n            `/page/${pageNumber}/annotations`,\r\n            {\r\n                method: \"POST\",\r\n                body: JSON.stringify(pageAnnotations),\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n            },\r\n        );\r\n        let success = false;\r\n        try {\r\n            const response = await fetch(request);\r\n            const responseText = response.text();\r\n            if (response.status !== 200) {\r\n                alert(\"cannot save: \" + responseText);\r\n            } else {\r\n                success = true;\r\n            }\r\n        } catch (errorPromise) {\r\n            let error = await errorPromise;\r\n            alert(\"cannot save: \" + error);\r\n        }\r\n        if (success) {\r\n            alert(\"saved!\");\r\n        }\r\n    }\r\n\r\n    function doInit(): void {\r\n        const saveButton = <HTMLInputElement|null>document.getElementById(\"pdfmcr-save-button\");\r\n        if (saveButton === null) {\r\n            return;\r\n        }\r\n\r\n        saveButton.addEventListener(\"click\", doSave);\r\n    }\r\n\r\n    export function init(): void {\r\n        document.addEventListener(\"DOMContentLoaded\", doInit);\r\n    }\r\n}\r\n","import { BadMap, NoValue } from \"./badmap\";\r\n\r\n\r\ninterface Position {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ninterface StartState {\r\n    startPosition: Position,\r\n    splitterLeft: number,\r\n    splitterTop: number,\r\n    leftPaneWidth: number,\r\n    rightPaneWidth: number,\r\n}\r\n\r\n\r\nexport namespace Splitter {\r\n    const activeDocumentEvents: [\"mousemove\"|\"mouseup\", (event: MouseEvent) => void][] = [];\r\n    const splitterToStartState: BadMap<HTMLElement, StartState> = new BadMap();\r\n\r\n    function mouseReleased(): void {\r\n        // disable the active document events\r\n        const disableUs = activeDocumentEvents.splice(0, activeDocumentEvents.length);\r\n        for (let i = 0; i < disableUs.length; i++) {\r\n            document.removeEventListener(disableUs[i][0], disableUs[i][1]);\r\n        }\r\n    }\r\n\r\n    function mouseMoved(splitter: HTMLElement, event: MouseEvent): void {\r\n        const startState = splitterToStartState.get(splitter);\r\n        if (startState === NoValue) {\r\n            return;\r\n        }\r\n\r\n        const leftPane = <HTMLElement|null>splitter.previousElementSibling;\r\n        const rightPane = <HTMLElement|null>splitter.nextElementSibling;\r\n        if (leftPane === null || rightPane === null) {\r\n            return;\r\n        }\r\n\r\n        const difference = {\r\n            x: event.clientX - startState.startPosition.x,\r\n            y: event.clientY - startState.startPosition.y,\r\n        };\r\n        if (difference.x < -startState.leftPaneWidth) {\r\n            difference.x = -startState.leftPaneWidth;\r\n        }\r\n        if (difference.x > startState.rightPaneWidth) {\r\n            difference.x = startState.rightPaneWidth;\r\n        }\r\n\r\n        splitter.style.left = `${startState.splitterLeft + difference.x}px`;\r\n        leftPane.style.width = `${startState.leftPaneWidth + difference.x}px`;\r\n        rightPane.style.width = `${startState.rightPaneWidth - difference.x}px`;\r\n    }\r\n\r\n    function activateSplitter(splitter: HTMLElement, event: MouseEvent): void {\r\n        const leftPane = <HTMLElement|null>splitter.previousElementSibling;\r\n        const rightPane = <HTMLElement|null>splitter.nextElementSibling;\r\n        if (leftPane === null || rightPane === null) {\r\n            return;\r\n        }\r\n\r\n        splitterToStartState.set(splitter, {\r\n            startPosition: {\r\n                x: event.clientX,\r\n                y: event.clientY,\r\n            },\r\n            splitterLeft: splitter.offsetLeft,\r\n            splitterTop: splitter.offsetTop,\r\n            leftPaneWidth: leftPane.offsetWidth,\r\n            rightPaneWidth: rightPane.offsetWidth,\r\n        });\r\n\r\n        const moveHandler = moveEvent => mouseMoved(splitter, moveEvent);\r\n        document.addEventListener(\"mousemove\", moveHandler);\r\n        activeDocumentEvents.push([\"mousemove\", moveHandler]);\r\n\r\n        const releaseHandler = () => mouseReleased();\r\n        document.addEventListener(\"mouseup\", releaseHandler);\r\n        activeDocumentEvents.push([\"mouseup\", releaseHandler]);\r\n    }\r\n\r\n    function initContainer(container: HTMLElement): void {\r\n        const panes = <HTMLCollectionOf<HTMLElement>>container.getElementsByClassName(\"spl-pane\");\r\n        for (const pane of panes) {\r\n            pane.style.flexGrow = \"1\";\r\n            pane.style.flexShrink = \"1\";\r\n            pane.style.flexBasis = \"auto\";\r\n            pane.style.overflow = \"hidden\";\r\n        }\r\n        const splitters = <HTMLCollectionOf<HTMLElement>>container.getElementsByClassName(\"spl-splitter\");\r\n        for (const splitter of splitters) {\r\n            splitter.style.width = \"8px\";\r\n            splitter.style.height = \"100%\";\r\n            splitter.style.cursor = \"col-resize\";\r\n            splitter.style.userSelect = \"none\";\r\n            splitter.addEventListener(\"mousedown\", event => activateSplitter(splitter, event));\r\n        }\r\n    }\r\n\r\n    function doInit(): void {\r\n        // initialize each splitter container\r\n        const splitterContainers = document.getElementsByClassName(\"spl-splitter-container\");\r\n        for (const splitterContainer of splitterContainers) {\r\n            initContainer(<HTMLElement>splitterContainer);\r\n        }\r\n    }\r\n\r\n    export function init(): void {\r\n        document.addEventListener(\"DOMContentLoaded\", doInit);\r\n    }\r\n}\r\n","class KeyValuePair<K, V> {\r\n    key: K;\r\n    value: V;\r\n\r\n    public constructor(key: K, value: V) {\r\n        this.key = key;\r\n        this.value = value;\r\n    }\r\n\r\n    public getKey(): K {\r\n        return this.key;\r\n    }\r\n\r\n    public getValue(): V {\r\n        return this.value;\r\n    }\r\n}\r\n\r\nexport const NoValue = Symbol();\r\n\r\n/// An extremely simplistic key-value map.\r\nexport class BadMap<K, V> {\r\n    entries: KeyValuePair<K, V>[];\r\n\r\n    /// Creates an empty key-value map.\r\n    public constructor() {\r\n        this.entries = [];\r\n    }\r\n\r\n    /// Returns the index into `this.entries` for the given key.\r\n    getIndexForKey(key: K): number|null {\r\n        for (let i = 0; i < this.entries.length; i++) {\r\n            if (this.entries[i].getKey() === key) {\r\n                return i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /// Sets the value for `key` to `value` and returns the previous value.\r\n    ///\r\n    /// Returns the singleton `NoValue` if no value was stored for that key.\r\n    public set(key: K, value: V): V|typeof NoValue {\r\n        const index = this.getIndexForKey(key);\r\n        if (index !== null) {\r\n            const ret = this.entries[index].getValue();\r\n            this.entries[index] = new KeyValuePair(this.entries[index].getKey(), value);\r\n            return ret;\r\n        }\r\n        this.entries.push(new KeyValuePair(key, value));\r\n        return NoValue;\r\n    }\r\n\r\n    /// Obtains the value for `key`.\r\n    ///\r\n    /// Returns the singleton `NoValue` if no value was stored for that key.\r\n    public get(key: K): V|typeof NoValue {\r\n        const index = this.getIndexForKey(key);\r\n        if (index !== null) {\r\n            return this.entries[index].getValue();\r\n        }\r\n        return NoValue;\r\n    }\r\n\r\n    /// Obtains the value for `key` and removes this key-value pair from the map.\r\n    ///\r\n    /// Returns the singleton `NoValue` if no value was stored for that key.\r\n    public remove(key: K): V|typeof NoValue {\r\n        const index = this.getIndexForKey(key);\r\n        if (index !== null) {\r\n            const removedKvps = this.entries.splice(index, 1);\r\n            return removedKvps[0].getValue();\r\n        }\r\n        return NoValue;\r\n    }\r\n\r\n    /// Returns the number of entries in the map.\r\n    public length(): number {\r\n        return this.entries.length;\r\n    }\r\n\r\n    /// Returns an array containing all the keys in the map.\r\n    ///\r\n    /// Note that modifying the keys can lead to unexpected behavior of the map, so, like, don't.\r\n    public keys(): K[] {\r\n        const ret: K[] = [];\r\n        for (let i = 0; i < this.entries.length; i++) {\r\n            ret.push(this.entries[i].getKey());\r\n        }\r\n        return ret;\r\n    }\r\n}\r\n","import { Position } from \"./common\";\r\n\r\n\r\nexport namespace SvgDrag {\r\n    let dragStart: Position|null = null;\r\n    let currentImageScale: number = 1.0;\r\n    let currentImageOffset: Position = { x: 0, y: 0 };\r\n    const dragEvents: [string, any][] = [];\r\n\r\n    function updateGroupTransform(groupElem: SVGGElement): void {\r\n        const svgRoot = groupElem.ownerSVGElement;\r\n        if (svgRoot === null) {\r\n            // can't do much\r\n            return;\r\n        }\r\n        const scaling = svgRoot.createSVGTransform();\r\n        scaling.setScale(currentImageScale, currentImageScale);\r\n        const translation = svgRoot.createSVGTransform();\r\n        translation.setTranslate(currentImageOffset.x, currentImageOffset.y);\r\n        groupElem.transform.baseVal.initialize(scaling);\r\n        groupElem.transform.baseVal.appendItem(translation);\r\n    }\r\n\r\n    function resetView(groupElem: SVGGElement): void {\r\n        currentImageOffset = {\r\n            x: 0,\r\n            y: 0,\r\n        };\r\n        currentImageScale = 1.0;\r\n        updateGroupTransform(groupElem);\r\n    }\r\n\r\n    function performZoom(groupElem: SVGGElement, factor: number): void {\r\n        currentImageScale *= factor;\r\n        updateGroupTransform(groupElem);\r\n    }\r\n\r\n    function groupDragOver(groupElem: SVGGElement, overEvent: MouseEvent): void {\r\n        if (dragStart === null) {\r\n            // can't do much\r\n            return;\r\n        }\r\n\r\n        currentImageOffset = {\r\n            x: (overEvent.clientX - dragStart.x) / currentImageScale,\r\n            y: (overEvent.clientY - dragStart.y) / currentImageScale,\r\n        };\r\n\r\n        // move the group there\r\n        updateGroupTransform(groupElem);\r\n    }\r\n\r\n    function groupDragEnd(groupElem: SVGGElement, endEvent: MouseEvent): void {\r\n        if (endEvent.button !== 0) {\r\n            // wrong button released\r\n            return;\r\n        }\r\n\r\n        if (dragStart === null) {\r\n            // meh\r\n            return;\r\n        }\r\n        const svgRoot = groupElem.ownerSVGElement;\r\n        if (svgRoot === null) {\r\n            return;\r\n        }\r\n\r\n        // store new position as final coordinates\r\n        currentImageOffset = {\r\n            x: (endEvent.clientX - dragStart.x) / currentImageScale,\r\n            y: (endEvent.clientY - dragStart.y) / currentImageScale,\r\n        };\r\n\r\n        // forget start coordinates\r\n        dragStart = null;\r\n\r\n        // unregister all the drag events\r\n        const oldDragEvents = dragEvents.splice(0, dragEvents.length);\r\n        for (let oldDragEvent of oldDragEvents) {\r\n            svgRoot.removeEventListener(oldDragEvent[0], oldDragEvent[1]);\r\n        }\r\n\r\n        // update one last time\r\n        updateGroupTransform(groupElem);\r\n    }\r\n\r\n    function registerDragEvent<K extends keyof SVGElementEventMap>(element: SVGElement, eventName: K, handler: (this: SVGElement, ev: SVGElementEventMap[K]) => any) {\r\n        element.addEventListener(eventName, handler);\r\n        dragEvents.push([eventName, handler]);\r\n    }\r\n\r\n    function groupDragStarted(groupElem: SVGGElement, startEvent: MouseEvent): void {\r\n        if (startEvent.button !== 0) {\r\n            return;\r\n        }\r\n        const svgRoot = groupElem.ownerSVGElement;\r\n        if (svgRoot === null) {\r\n            return;\r\n        }\r\n\r\n        dragStart = {\r\n            x: startEvent.offsetX - (currentImageOffset.x * currentImageScale),\r\n            y: startEvent.offsetY - (currentImageOffset.y * currentImageScale),\r\n        };\r\n        registerDragEvent(svgRoot, \"mousemove\", overEvent => groupDragOver(groupElem, overEvent));\r\n        registerDragEvent(svgRoot, \"mouseup\", endEvent => groupDragEnd(groupElem, endEvent));\r\n    }\r\n\r\n    function doInit(): void {\r\n        const groupElem = <SVGGElement|null>document.getElementById(\"pdfmcr-page-group\");\r\n        if (groupElem === null) {\r\n            return;\r\n        }\r\n        groupElem.addEventListener(\"mousedown\", startEvent => groupDragStarted(groupElem, startEvent));\r\n\r\n        const zoomInButton = <HTMLInputElement|null>document.getElementById(\"pdfmcr-zoom-in-button\");\r\n        if (zoomInButton !== null) {\r\n            zoomInButton.addEventListener(\"click\", () => performZoom(groupElem, 3.0/2.0));\r\n        }\r\n        const zoomOutButton = <HTMLInputElement|null>document.getElementById(\"pdfmcr-zoom-out-button\");\r\n        if (zoomOutButton !== null) {\r\n            zoomOutButton.addEventListener(\"click\", () => performZoom(groupElem, 2.0/3.0));\r\n        }\r\n\r\n        const resetViewButton = <HTMLInputElement|null>document.getElementById(\"pdfmcr-reset-view-button\");\r\n        if (resetViewButton !== null) {\r\n            resetViewButton.addEventListener(\"click\", () => resetView(groupElem));\r\n        }\r\n    }\r\n\r\n    export function init(): void {\r\n        document.addEventListener(\"DOMContentLoaded\", doInit);\r\n    }\r\n}\r\n"],"names":["$271df92eb01208eb$export$b35169942a03d518","$f9701a97a713f0ee$export$e3ca8059b2de989","$0f25fb17441acb62$export$d38cf224d56e3ace","$e0fcd71990a6304d$export$980082fdfafd21f8","$cd3c29b10a227d00$export$9bf3ed2c8368b180","$813589cc5cb274c7$export$276d1de0bc02ff5b","$813589cc5cb274c7$export$3ae71ba538136673","element","svgLengthType","svgRoot","ownerSVGElement","xform","transform","baseVal","length","xform0","getItem","type","SVGTransform","SVG_TRANSFORM_TRANSLATE","sizer","createSVGLength","newValueSpecifiedUnits","SVGLength","SVG_LENGTHTYPE_NUMBER","matrix","e","convertToSpecifiedUnits","x","valueInSpecifiedUnits","f","y","$813589cc5cb274c7$export$18ec489782ea8e1f","pageGroup","image","child","children","namespaceURI","tagName","height","SVG_LENGTHTYPE_PT","$813589cc5cb274c7$export$cba25e9bb6cb9e56","parent","namespace","localName","childElements","namedElements","i","childElement","push","$813589cc5cb274c7$export$8e0657814ad0f535","stringValue","endsWith","substring","TextManagement","textForm","selectedText","selectedTextSpan","textSpanSelected","textSpans","textSpanIndex","textSpanSelect","selectedIndex","leading","lineHeight","style","fontSize","textArea","value","textContent","fontBoldCheckbox","checked","fontWeight","fontItalicCheckbox","fontStyle","fontSizeInput","charSpacingInput","letterSpacing","wordSpacingInput","wordSpacing","leadingInput","languageEnabledCheckbox","hasAttribute","languageInput","getAttribute","altTextEnabledCheckbox","altTextInput","actualTextEnabledCheckbox","actualTextInput","expansionEnabledCheckbox","expansionTextInput","addTextSpan","newTextChunk","createDefaultTextChunk","makeTSpanFromTextChunk","option","document","createElement","text","appendChild","options","removeTextSpan","tspans","tspanToDelete","parentElement","removeChild","remove","updateTextSpan","checkbox","input","attribute","setAttribute","removeAttribute","doInit","editLabelSection","getElementById","addTextSpanButton","removeTextSpanButton","updateTextSpanButton","addEventListener","textSelected","newlySelectedText","tspan","display","textDeselected","init","Annotations","dragStart","dragEvents","selectedRect","setGroupPos","annotationGroup","clientX","clientY","createSVGTransform","setTranslate","initialize","initialText","font_variant","font_size","character_spacing","word_spacing","language","alternate_text","actual_text","expansion","annoTextElem","textChunk","lineHeightPt","annoTSpanElem","createElementNS","annoTextNode","createTextNode","makeGroupFromAnnotation","pageHeightPt","annotation","lengther","left","xPx","bottom","yPx","annoGroup","classList","add","fill","elements","grabRect","width","fillOpacity","event","rectGrabbed","rect","button","stopPropagation","annotationTexts","getElementsByTagNameNS","curPos","moveEvent","releaseEvent","rectReleased","removeThisEvent","splice","removeEventListener","existingAnnotations","undefined","annotations","artifacts","realizeExistingAnnotations","imageHeightPt","hookUpNewAnnotationForm","newAnnotationForm","textBox","querySelector","newAnnotationFormSubmit","preventDefault","annotationText","Serialize","serializeAnnotation","pos","textChildren","textChild","rawChild","fontSizePt","characterSpacingPt","wordSpacingPt","isBold","isItalic","leadingPt","childNodes","nodeType","Node","TEXT_NODE","fontVariant","Math","round","serialize","ret","gChild","contains","artifactKind","kind","doSave","alert","metaElement","pageNumber","content","request","Request","method","body","JSON","stringify","headers","success","response","fetch","responseText","status","errorPromise","saveButton","$1929f88661691794$var$KeyValuePair","constructor","key","getKey","getValue","$1929f88661691794$export$26cc3c52be8321f4","Symbol","$1929f88661691794$export$b2b4abe18efe1588","entries","getIndexForKey","set","index","get","removedKvps","keys","Splitter","activeDocumentEvents","splitterToStartState","splitterContainer","getElementsByClassName","initContainer","pane","container","flexGrow","flexShrink","flexBasis","overflow","splitter","cursor","userSelect","activateSplitter","leftPane","previousElementSibling","rightPane","nextElementSibling","startPosition","splitterLeft","offsetLeft","splitterTop","offsetTop","leftPaneWidth","offsetWidth","rightPaneWidth","moveHandler","mouseMoved","startState","difference","releaseHandler","mouseReleased","disableUs","SvgDrag","currentImageScale","currentImageOffset","updateGroupTransform","groupElem","scaling","setScale","translation","appendItem","registerDragEvent","eventName","handler","startEvent","groupDragStarted","offsetX","offsetY","overEvent","endEvent","groupDragEnd","oldDragEvent","zoomInButton","zoomOutButton","resetViewButton","window","PdfMcr"],"version":3,"file":"main.js.map"}