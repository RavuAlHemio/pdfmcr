{"mappings":"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","sources":["<anon>","src/main.ts","src/splitter.ts","src/badmap.ts"],"sourcesContent":["(() => {\nclass $1929f88661691794$var$KeyValuePair {\n    constructor(key, value){\n        this.key = key;\n        this.value = value;\n    }\n    getKey() {\n        return this.key;\n    }\n    getValue() {\n        return this.value;\n    }\n}\nconst $1929f88661691794$export$26cc3c52be8321f4 = Symbol();\nclass $1929f88661691794$export$b2b4abe18efe1588 {\n    /// Creates an empty key-value map.\n    constructor(){\n        this.entries = [];\n    }\n    /// Returns the index into `this.entries` for the given key.\n    getIndexForKey(key) {\n        for(let i = 0; i < this.entries.length; i++){\n            if (this.entries[i].getKey() === key) return i;\n        }\n        return null;\n    }\n    /// Sets the value for `key` to `value` and returns the previous value.\n    ///\n    /// Returns the singleton `NoValue` if no value was stored for that key.\n    set(key, value) {\n        const index = this.getIndexForKey(key);\n        if (index !== null) {\n            const ret = this.entries[index].getValue();\n            this.entries[index] = new $1929f88661691794$var$KeyValuePair(this.entries[index].getKey(), value);\n            return ret;\n        }\n        this.entries.push(new $1929f88661691794$var$KeyValuePair(key, value));\n        return $1929f88661691794$export$26cc3c52be8321f4;\n    }\n    /// Obtains the value for `key`.\n    ///\n    /// Returns the singleton `NoValue` if no value was stored for that key.\n    get(key) {\n        const index = this.getIndexForKey(key);\n        if (index !== null) return this.entries[index].getValue();\n        return $1929f88661691794$export$26cc3c52be8321f4;\n    }\n    /// Obtains the value for `key` and removes this key-value pair from the map.\n    ///\n    /// Returns the singleton `NoValue` if no value was stored for that key.\n    remove(key) {\n        const index = this.getIndexForKey(key);\n        if (index !== null) {\n            const removedKvps = this.entries.splice(index, 1);\n            return removedKvps[0].getValue();\n        }\n        return $1929f88661691794$export$26cc3c52be8321f4;\n    }\n    /// Returns the number of entries in the map.\n    length() {\n        return this.entries.length;\n    }\n    /// Returns an array containing all the keys in the map.\n    ///\n    /// Note that modifying the keys can lead to unexpected behavior of the map, so, like, don't.\n    keys() {\n        const ret = [];\n        for(let i = 0; i < this.entries.length; i++)ret.push(this.entries[i].getKey());\n        return ret;\n    }\n}\n\n\n(function(Splitter) {\n    const activeDocumentEvents = [];\n    const splitterToStartState = new (0, $1929f88661691794$export$b2b4abe18efe1588)();\n    function mouseReleased() {\n        // disable the active document events\n        const disableUs = activeDocumentEvents.splice(0, activeDocumentEvents.length);\n        for(let i = 0; i < disableUs.length; i++)document.removeEventListener(disableUs[i][0], disableUs[i][1]);\n    }\n    function mouseMoved(splitter, event) {\n        const startState = splitterToStartState.get(splitter);\n        if (startState === (0, $1929f88661691794$export$26cc3c52be8321f4)) return;\n        const leftPane = splitter.previousElementSibling;\n        const rightPane = splitter.nextElementSibling;\n        if (leftPane === null || rightPane === null) return;\n        const difference = {\n            x: event.clientX - startState.startPosition.x,\n            y: event.clientY - startState.startPosition.y\n        };\n        if (difference.x < -startState.leftPaneWidth) difference.x = -startState.leftPaneWidth;\n        if (difference.x > startState.rightPaneWidth) difference.x = startState.rightPaneWidth;\n        splitter.style.left = `${startState.splitterLeft + difference.x}px`;\n        leftPane.style.width = `${startState.leftPaneWidth + difference.x}px`;\n        rightPane.style.width = `${startState.rightPaneWidth - difference.x}px`;\n    }\n    function activateSplitter(splitter, event) {\n        const leftPane = splitter.previousElementSibling;\n        const rightPane = splitter.nextElementSibling;\n        if (leftPane === null || rightPane === null) return;\n        splitterToStartState.set(splitter, {\n            startPosition: {\n                x: event.clientX,\n                y: event.clientY\n            },\n            splitterLeft: splitter.offsetLeft,\n            splitterTop: splitter.offsetTop,\n            leftPaneWidth: leftPane.offsetWidth,\n            rightPaneWidth: rightPane.offsetWidth\n        });\n        const moveHandler = (moveEvent)=>mouseMoved(splitter, moveEvent);\n        document.addEventListener(\"mousemove\", moveHandler);\n        activeDocumentEvents.push([\n            \"mousemove\",\n            moveHandler\n        ]);\n        const releaseHandler = ()=>mouseReleased();\n        document.addEventListener(\"mouseup\", releaseHandler);\n        activeDocumentEvents.push([\n            \"mouseup\",\n            releaseHandler\n        ]);\n    }\n    function initContainer(container) {\n        const splitters = container.getElementsByClassName(\"spl-splitter\");\n        for (const splitter of splitters)splitter.addEventListener(\"mousedown\", (event)=>activateSplitter(splitter, event));\n    }\n    function init() {\n        // initialize each splitter container\n        const splitterContainers = document.getElementsByClassName(\"spl-splitter-container\");\n        for (const splitterContainer of splitterContainers)initContainer(splitterContainer);\n    }\n    Splitter.init = init;\n})($e0fcd71990a6304d$export$980082fdfafd21f8 || ($e0fcd71990a6304d$export$980082fdfafd21f8 = {}));\nvar $e0fcd71990a6304d$export$980082fdfafd21f8;\n\n\nwindow.PdfMcr = {\n    Splitter: (0, $e0fcd71990a6304d$export$980082fdfafd21f8)\n};\n\n})();\n//# sourceMappingURL=main.js.map\n","import { Splitter } from \"./splitter.js\";\r\n\r\n// \"globals are evil\"\r\ndeclare global {\r\n    interface Window { PdfMcr: any; }\r\n}\r\nwindow.PdfMcr = {\r\n    Splitter: Splitter,\r\n};\r\n","import { BadMap, NoValue } from \"./badmap.js\";\r\n\r\n\r\ninterface Position {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ninterface StartState {\r\n    startPosition: Position,\r\n    splitterLeft: number,\r\n    splitterTop: number,\r\n    leftPaneWidth: number,\r\n    rightPaneWidth: number,\r\n}\r\n\r\n\r\nexport namespace Splitter {\r\n    const activeDocumentEvents: [\"mousemove\"|\"mouseup\", (event: MouseEvent) => void][] = [];\r\n    const splitterToStartState: BadMap<HTMLElement, StartState> = new BadMap();\r\n\r\n    function mouseReleased(): void {\r\n        // disable the active document events\r\n        const disableUs = activeDocumentEvents.splice(0, activeDocumentEvents.length);\r\n        for (let i = 0; i < disableUs.length; i++) {\r\n            document.removeEventListener(disableUs[i][0], disableUs[i][1]);\r\n        }\r\n    }\r\n\r\n    function mouseMoved(splitter: HTMLElement, event: MouseEvent): void {\r\n        const startState = splitterToStartState.get(splitter);\r\n        if (startState === NoValue) {\r\n            return;\r\n        }\r\n\r\n        const leftPane = <HTMLElement|null>splitter.previousElementSibling;\r\n        const rightPane = <HTMLElement|null>splitter.nextElementSibling;\r\n        if (leftPane === null || rightPane === null) {\r\n            return;\r\n        }\r\n\r\n        const difference = {\r\n            x: event.clientX - startState.startPosition.x,\r\n            y: event.clientY - startState.startPosition.y,\r\n        };\r\n        if (difference.x < -startState.leftPaneWidth) {\r\n            difference.x = -startState.leftPaneWidth;\r\n        }\r\n        if (difference.x > startState.rightPaneWidth) {\r\n            difference.x = startState.rightPaneWidth;\r\n        }\r\n\r\n        splitter.style.left = `${startState.splitterLeft + difference.x}px`;\r\n        leftPane.style.width = `${startState.leftPaneWidth + difference.x}px`;\r\n        rightPane.style.width = `${startState.rightPaneWidth - difference.x}px`;\r\n    }\r\n\r\n    function activateSplitter(splitter: HTMLElement, event: MouseEvent): void {\r\n        const leftPane = <HTMLElement|null>splitter.previousElementSibling;\r\n        const rightPane = <HTMLElement|null>splitter.nextElementSibling;\r\n        if (leftPane === null || rightPane === null) {\r\n            return;\r\n        }\r\n\r\n        splitterToStartState.set(splitter, {\r\n            startPosition: {\r\n                x: event.clientX,\r\n                y: event.clientY,\r\n            },\r\n            splitterLeft: splitter.offsetLeft,\r\n            splitterTop: splitter.offsetTop,\r\n            leftPaneWidth: leftPane.offsetWidth,\r\n            rightPaneWidth: rightPane.offsetWidth,\r\n        });\r\n\r\n        const moveHandler = moveEvent => mouseMoved(splitter, moveEvent);\r\n        document.addEventListener(\"mousemove\", moveHandler);\r\n        activeDocumentEvents.push([\"mousemove\", moveHandler]);\r\n\r\n        const releaseHandler = () => mouseReleased();\r\n        document.addEventListener(\"mouseup\", releaseHandler);\r\n        activeDocumentEvents.push([\"mouseup\", releaseHandler]);\r\n    }\r\n\r\n    function initContainer(container: HTMLElement): void {\r\n        const splitters = <HTMLCollectionOf<HTMLElement>>container.getElementsByClassName(\"spl-splitter\");\r\n        for (const splitter of splitters) {\r\n            splitter.addEventListener(\"mousedown\", event => activateSplitter(splitter, event));\r\n        }\r\n    }\r\n\r\n    export function init(): void {\r\n        // initialize each splitter container\r\n        const splitterContainers = document.getElementsByClassName(\"spl-splitter-container\");\r\n        for (const splitterContainer of splitterContainers) {\r\n            initContainer(<HTMLElement>splitterContainer);\r\n        }\r\n    }\r\n}\r\n","class KeyValuePair<K, V> {\r\n    key: K;\r\n    value: V;\r\n\r\n    public constructor(key: K, value: V) {\r\n        this.key = key;\r\n        this.value = value;\r\n    }\r\n\r\n    public getKey(): K {\r\n        return this.key;\r\n    }\r\n\r\n    public getValue(): V {\r\n        return this.value;\r\n    }\r\n}\r\n\r\nexport const NoValue = Symbol();\r\n\r\n/// An extremely simplistic key-value map.\r\nexport class BadMap<K, V> {\r\n    entries: KeyValuePair<K, V>[];\r\n\r\n    /// Creates an empty key-value map.\r\n    public constructor() {\r\n        this.entries = [];\r\n    }\r\n\r\n    /// Returns the index into `this.entries` for the given key.\r\n    getIndexForKey(key: K): number|null {\r\n        for (let i = 0; i < this.entries.length; i++) {\r\n            if (this.entries[i].getKey() === key) {\r\n                return i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /// Sets the value for `key` to `value` and returns the previous value.\r\n    ///\r\n    /// Returns the singleton `NoValue` if no value was stored for that key.\r\n    public set(key: K, value: V): V|typeof NoValue {\r\n        const index = this.getIndexForKey(key);\r\n        if (index !== null) {\r\n            const ret = this.entries[index].getValue();\r\n            this.entries[index] = new KeyValuePair(this.entries[index].getKey(), value);\r\n            return ret;\r\n        }\r\n        this.entries.push(new KeyValuePair(key, value));\r\n        return NoValue;\r\n    }\r\n\r\n    /// Obtains the value for `key`.\r\n    ///\r\n    /// Returns the singleton `NoValue` if no value was stored for that key.\r\n    public get(key: K): V|typeof NoValue {\r\n        const index = this.getIndexForKey(key);\r\n        if (index !== null) {\r\n            return this.entries[index].getValue();\r\n        }\r\n        return NoValue;\r\n    }\r\n\r\n    /// Obtains the value for `key` and removes this key-value pair from the map.\r\n    ///\r\n    /// Returns the singleton `NoValue` if no value was stored for that key.\r\n    public remove(key: K): V|typeof NoValue {\r\n        const index = this.getIndexForKey(key);\r\n        if (index !== null) {\r\n            const removedKvps = this.entries.splice(index, 1);\r\n            return removedKvps[0].getValue();\r\n        }\r\n        return NoValue;\r\n    }\r\n\r\n    /// Returns the number of entries in the map.\r\n    public length(): number {\r\n        return this.entries.length;\r\n    }\r\n\r\n    /// Returns an array containing all the keys in the map.\r\n    ///\r\n    /// Note that modifying the keys can lead to unexpected behavior of the map, so, like, don't.\r\n    public keys(): K[] {\r\n        const ret: K[] = [];\r\n        for (let i = 0; i < this.entries.length; i++) {\r\n            ret.push(this.entries[i].getKey());\r\n        }\r\n        return ret;\r\n    }\r\n}\r\n"],"names":["$e0fcd71990a6304d$export$980082fdfafd21f8","$1929f88661691794$var$KeyValuePair","constructor","key","value","getKey","getValue","$1929f88661691794$export$26cc3c52be8321f4","Symbol","$1929f88661691794$export$b2b4abe18efe1588","entries","getIndexForKey","i","length","set","index","ret","push","get","remove","removedKvps","splice","keys","Splitter","activeDocumentEvents","splitterToStartState","init","splitterContainer","document","getElementsByClassName","splitter","container","addEventListener","event","activateSplitter","leftPane","previousElementSibling","rightPane","nextElementSibling","startPosition","x","clientX","y","clientY","splitterLeft","offsetLeft","splitterTop","offsetTop","leftPaneWidth","offsetWidth","rightPaneWidth","moveHandler","moveEvent","mouseMoved","startState","difference","style","left","width","releaseHandler","mouseReleased","disableUs","removeEventListener","window","PdfMcr"],"version":3,"file":"main.js.map"}